/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package db;

import java.io.BufferedReader;
import java.io.FileWriter;
import java.io.File;
import java.io.FileReader;
import java.sql.Connection;
import java.sql.DriverManager;
import com.ibatis.common.jdbc.ScriptRunner;
import java.awt.GridLayout;
import java.io.BufferedWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import java.nio.file.Paths;
import javax.swing.Box;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

/**
 *
 * @author jordanmurray
 */
public class DatabaseStartup extends javax.swing.JFrame {
    // The url variable will be updated, the path variable won't
//    "/Users/Workspaces/projectRelDatabase/JMURRAYRelDB"
    static String url = "";
    String dir = "/Users/Workspaces/projectRelDatabase";   
    String fileName = "/JMURRAYDB";        
    /**
     * Creates new form DatabaseStartup
     */
    public DatabaseStartup() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createDatabase = new javax.swing.JButton();
        checkDBState = new javax.swing.JButton();
        startApp = new javax.swing.JButton();
        viewLocation = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();
        changeLocation = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        createDatabase.setText("Create Database");
        createDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createDatabaseActionPerformed(evt);
            }
        });

        checkDBState.setText("Check Database Exists");
        checkDBState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDBStateActionPerformed(evt);
            }
        });

        startApp.setText("Start Program");
        startApp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startAppActionPerformed(evt);
            }
        });

        viewLocation.setText("View Location");
        viewLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewLocationActionPerformed(evt);
            }
        });

        resultArea.setColumns(20);
        resultArea.setRows(5);
        jScrollPane1.setViewportView(resultArea);

        changeLocation.setText("Change Location");
        changeLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeLocationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(createDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(viewLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(checkDBState)
                        .addGap(18, 18, 18)
                        .addComponent(changeLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(98, 98, 98)
                        .addComponent(startApp)))
                .addContainerGap(32, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {changeLocation, checkDBState, createDatabase, startApp, viewLocation});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createDatabase, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(viewLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkDBState)
                    .addComponent(changeLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(startApp)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                .addContainerGap())
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {changeLocation, checkDBState, createDatabase, startApp, viewLocation});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void createDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createDatabaseActionPerformed
        // Create folder where database will be stored
        if (!checkExists()) {
            String url = "jdbc:sqlite:" + dir + fileName;            
            new File(dir).mkdir();
            
            this.url = url;
            
            // Load the driver into memory (JVM)
            try {
                Class.forName("org.sqlite.JDBC").newInstance();
            } catch (Exception ex) {
                System.out.println(ex);
            }
            
            try (Connection conn = DriverManager.getConnection(url)) {
                try {
                    ScriptRunner runner = new ScriptRunner(conn, false, false);                    
                    
                    String currentDir = System.getProperty("user.dir");
                    String splitCurrentDir[] = currentDir.split("\\W+");
                    
                    String os = System.getProperty("os.name");
                    String prefix = "";
                    
                    String pathToDB = "";
                    if(os.matches("Mac OS X")){
                        prefix = "/";
                    } else{
                        prefix = "\\";
                    }
                    pathToDB += prefix + "src" + prefix + "SQLCreationOfTables.sql";
                    
                    if(splitCurrentDir[splitCurrentDir.length - 1].matches("dist")){
                        currentDir = currentDir.substring(0, currentDir.length() - 4) + pathToDB;
                    } else{
                        currentDir += pathToDB;
                    }
                    
                    runner.runScript(new BufferedReader(new FileReader(currentDir)));
                    resultArea.setText("Database has been created");
                } catch (Exception e) {
                    throwError(e);
                }
            } catch (Exception e) {
                throwError(e);
            }
        }
    }//GEN-LAST:event_createDatabaseActionPerformed

    private void checkDBStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDBStateActionPerformed
        if(!checkExists()){
            resultArea.setText("The database does not exist");
        } else{
            resultArea.setText("The database exists");    
        }
    }//GEN-LAST:event_checkDBStateActionPerformed
   
    private void throwError(Exception e){
        JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
    }
    
    private void throwInfo(String e){
        JOptionPane.showMessageDialog(null, e);
    }
    
    private boolean checkExists(){
        System.out.println("dir: " + dir + "\nName: " + fileName);
        if(Files.exists(Paths.get(dir + fileName))){
            System.out.println("true");
            return true;
        } else{
            System.out.println("false");
            return false;
        }
    }
    
    private void checkDatabaseExists(){
//        if(pathToDatabase == ""){
//            resultArea.setText("Database does not exist");
//            return false;
//        }
//        
//        else if(Files.exists(Paths.get(pathToDatabase))){
//            resultArea.setText("Database exists");
//            return true;
//        }  
//        
//        else{
//            resultArea.setText("Database does not exist");
//            return false;
//        }
        
        if(url.isEmpty() && !checkExists()){
            System.out.println("test1");
            resultArea.setText("Location: " + dir + fileName + "\nNote: The database has not yet been created");    
        } 
        
        else if(url.isEmpty() && checkExists()){
            System.out.println("test2");
            resultArea.setText("Location: " + dir + fileName);
        }
        
        else {
            System.out.println("test3");
            resultArea.setText("Location: " + url);
        }   
    }
    
    private void fileUserInformation() throws IOException {
        String record = "OS: " + System.getProperty("os.name") + ", ";
        String name = "USER: " + System.getProperty("user.name") + ", ";

        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss a");  
        LocalDateTime now = LocalDateTime.now();  
        String time = "TIME: " + String.valueOf(dtf.format(now));
        
        BufferedWriter writer;
        
        if(!Files.exists(Paths.get("user-record"))){
            writer = new BufferedWriter(new FileWriter("user-record"));
            writer.write(name + record + time);
            writer.close();
       } 
        else{           
            // True value to enable edit mode
            writer = new BufferedWriter(new FileWriter("user-record", true));
            writer.append("\n" + name + record + time);
            writer.close();
       }
        
    }	// End method
    
    private void startAppActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startAppActionPerformed
        try {
            if(!checkExists()){
                int dialogBox = JOptionPane.showConfirmDialog(null, "Are you sure you want to proceed?", "Database has not been created", JOptionPane.OK_CANCEL_OPTION);
                switch(dialogBox){
                    case JOptionPane.CANCEL_OPTION -> { return; } 
                    case JOptionPane.CLOSED_OPTION -> { return; }
                }
            } 
            else if(checkExists() && url.isEmpty()){
                url = "jdbc:sqlite:" + dir + fileName;
            }
            
            fileUserInformation();            
            this.dispose();
            MainInterface.main(null);
        } catch (IOException ex) {
            Logger.getLogger(DatabaseStartup.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_startAppActionPerformed

    private void viewLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewLocationActionPerformed
        if(!checkExists()){
            resultArea.setText("Location: " + dir + fileName + "\nNote: The database has not yet been created");    
        } 
        
        else if(checkExists()){
            resultArea.setText("Location: " + dir + fileName);
        }
        
        else {
            resultArea.setText("Location: " + url);
        }  
        
    }//GEN-LAST:event_viewLocationActionPerformed

    private void changeLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeLocationActionPerformed
        changeLocation();
    }//GEN-LAST:event_changeLocationActionPerformed

    private boolean changeLocation(){
        JTextField dir = new JTextField(10);  
            
        JTextField fileName = new JTextField(10);   
        
        JPanel myPanel = new JPanel(new GridLayout(0, 1));
        myPanel.add(Box.createHorizontalStrut(5)); 
        
        myPanel.add(new JLabel("New Directory: "));
        myPanel.add(dir);
        
        myPanel.add(new JLabel("New File Name: "));
        myPanel.add(fileName);

        int dialogBox = JOptionPane.showConfirmDialog(null, myPanel, "Change location", JOptionPane.OK_CANCEL_OPTION);

        switch (dialogBox) {
            case JOptionPane.CANCEL_OPTION -> {
                return true;
            }

            case JOptionPane.CLOSED_OPTION -> {
                return true;
            }

            case JOptionPane.OK_OPTION -> {
                this.dir = dir.getText();
                this.fileName =  fileName.getText();
//                url = this.dir + this.fileName;
                throwInfo("New location set: " + this.dir + this.fileName);
            }
        }
       
        return true;
            
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DatabaseStartup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DatabaseStartup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DatabaseStartup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DatabaseStartup.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DatabaseStartup().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton changeLocation;
    private javax.swing.JButton checkDBState;
    private javax.swing.JButton createDatabase;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea resultArea;
    private javax.swing.JButton startApp;
    private javax.swing.JButton viewLocation;
    // End of variables declaration//GEN-END:variables
}
