/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package db;

import javax.swing.*;
import java.awt.*;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.text.ParseException;
import java.util.Date;
import java.text.SimpleDateFormat;
import java.util.regex.Pattern;
import java.util.regex.Matcher;
import java.time.format.DateTimeFormatter;  
import java.time.LocalDateTime;  


/**
 *
 * @author jordanmurray
 */
public class MainInterface extends javax.swing.JFrame {

    /**
     * Creates new form MainInterface
     */
    boolean a = true;
    String adminKey = "007";
    String employeeKey = "003";
    String url = new DatabaseStartup().url;
    String currentUser = "Admin";
    int viewProductBuyTable = 0;
    static JTextField[] productAreas = {};
    
    
    
   

    public MainInterface() {
        initComponents();
        JTextField[] productAreas = {
            productBrandName, productModelName, productSize, productScreenSize, productProcessor, productRAM, productStorage   
        };
        
        this.productAreas = productAreas;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        queryType = new javax.swing.ButtonGroup();
        warrantyGroup = new javax.swing.ButtonGroup();
        conditionGroup = new javax.swing.ButtonGroup();
        operatingSystem = new javax.swing.ButtonGroup();
        payFreq = new javax.swing.ButtonGroup();
        isAvail = new javax.swing.ButtonGroup();
        paymentMethod = new javax.swing.ButtonGroup();
        isMember = new javax.swing.ButtonGroup();
        Header = new javax.swing.JPanel();
        iconminmaxclose = new javax.swing.JPanel();
        closeBtn = new javax.swing.JPanel();
        close = new javax.swing.JLabel();
        minBtn = new javax.swing.JPanel();
        maxBtn = new javax.swing.JPanel();
        fullscreen = new javax.swing.JLabel();
        Menu = new javax.swing.JPanel();
        MenuIcon = new javax.swing.JPanel();
        linehidemenu = new javax.swing.JPanel();
        hidemenu = new javax.swing.JPanel();
        hideBtn = new javax.swing.JLabel();
        linestats = new javax.swing.JPanel();
        stats = new javax.swing.JPanel();
        statsBtn = new javax.swing.JLabel();
        lineview = new javax.swing.JPanel();
        view = new javax.swing.JPanel();
        someviewBtn = new javax.swing.JLabel();
        linequestion = new javax.swing.JPanel();
        buysell = new javax.swing.JPanel();
        buysellBtn = new javax.swing.JLabel();
        menuhide = new javax.swing.JPanel();
        menuTransactions = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        menuCustomers = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        menuProducts = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        menuEmployees = new javax.swing.JPanel();
        jLabel19 = new javax.swing.JLabel();
        dashboardPanel = new javax.swing.JPanel();
        Employees = new javax.swing.JPanel();
        transactionsHeading5 = new javax.swing.JLabel();
        controlPanelOutter7 = new javax.swing.JPanel();
        controlPanel7 = new javax.swing.JPanel();
        employeeSaveBtn = new javax.swing.JButton();
        employeeInsertBtn = new javax.swing.JButton();
        employeeDeleteBtn = new javax.swing.JButton();
        employeeSearchBtn = new javax.swing.JButton();
        employeeClearBtn = new javax.swing.JButton();
        employeeEditBtn = new javax.swing.JToggleButton();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel43 = new javax.swing.JLabel();
        employeeID = new javax.swing.JTextField();
        jLabel44 = new javax.swing.JLabel();
        employeeFirst = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        employeeSurname = new javax.swing.JTextField();
        jLabel46 = new javax.swing.JLabel();
        employeePosition = new javax.swing.JTextField();
        jLabel47 = new javax.swing.JLabel();
        employeeContractType = new javax.swing.JComboBox<>();
        jPanel3 = new javax.swing.JPanel();
        jLabel48 = new javax.swing.JLabel();
        employeeStartDate = new javax.swing.JTextField();
        jLabel49 = new javax.swing.JLabel();
        jLabel50 = new javax.swing.JLabel();
        jLabel51 = new javax.swing.JLabel();
        employeeHourlyRate = new javax.swing.JTextField();
        payFreqWeekly = new javax.swing.JRadioButton();
        payFreqMonthly = new javax.swing.JRadioButton();
        employeeContractSpinner = new javax.swing.JSpinner();
        employeeLengthDrop = new javax.swing.JComboBox<>();
        Customers = new javax.swing.JPanel();
        transactionsHeading6 = new javax.swing.JLabel();
        controlPanelOutter8 = new javax.swing.JPanel();
        customerControlPanel = new javax.swing.JPanel();
        customerSaveBtn = new javax.swing.JButton();
        customerInsertBtn = new javax.swing.JButton();
        customerDeleteBtn = new javax.swing.JButton();
        customerSearchBtn = new javax.swing.JButton();
        customerChangeUser = new javax.swing.JComboBox<>();
        customerClearBtn = new javax.swing.JButton();
        customerEditBtn = new javax.swing.JToggleButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel52 = new javax.swing.JLabel();
        customerTelephone = new javax.swing.JTextField();
        jLabel53 = new javax.swing.JLabel();
        customerFirst = new javax.swing.JTextField();
        jLabel54 = new javax.swing.JLabel();
        customerSurname = new javax.swing.JTextField();
        jLabel55 = new javax.swing.JLabel();
        customerCVV = new javax.swing.JTextField();
        jLabel56 = new javax.swing.JLabel();
        jLabel57 = new javax.swing.JLabel();
        customerEmployeeID = new javax.swing.JTextField();
        isMemberTrue = new javax.swing.JRadioButton();
        isMemberFalse = new javax.swing.JRadioButton();
        productPanel = new javax.swing.JPanel();
        controlPanelOutter10 = new javax.swing.JPanel();
        productChangeUser = new javax.swing.JComboBox<>();
        productClearBtn = new javax.swing.JButton();
        productInsertBtn = new javax.swing.JButton();
        productEditBtn = new javax.swing.JToggleButton();
        productSearchBtn = new javax.swing.JButton();
        productDeleteBtn = new javax.swing.JButton();
        productSaveBtn = new javax.swing.JButton();
        transactionsHeading8 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jLabel66 = new javax.swing.JLabel();
        productID = new javax.swing.JTextField();
        jLabel67 = new javax.swing.JLabel();
        productBrandName = new javax.swing.JTextField();
        jLabel68 = new javax.swing.JLabel();
        jLabel69 = new javax.swing.JLabel();
        jLabel70 = new javax.swing.JLabel();
        productPriceSpinner = new javax.swing.JSpinner();
        productSize = new javax.swing.JTextField();
        jLabel77 = new javax.swing.JLabel();
        productModelName = new javax.swing.JTextField();
        jLabel81 = new javax.swing.JLabel();
        productModelSpinner = new javax.swing.JSpinner();
        productLevels = new javax.swing.JComboBox<>();
        jPanel11 = new javax.swing.JPanel();
        jLabel71 = new javax.swing.JLabel();
        productScreenSize = new javax.swing.JTextField();
        jLabel72 = new javax.swing.JLabel();
        productProcessor = new javax.swing.JTextField();
        jLabel73 = new javax.swing.JLabel();
        productRAM = new javax.swing.JTextField();
        jLabel74 = new javax.swing.JLabel();
        jLabel78 = new javax.swing.JLabel();
        productStorage = new javax.swing.JTextField();
        jLabel79 = new javax.swing.JLabel();
        Apple = new javax.swing.JRadioButton();
        Windows = new javax.swing.JRadioButton();
        Android = new javax.swing.JRadioButton();
        Other = new javax.swing.JRadioButton();
        productIsAccToggle = new javax.swing.JToggleButton();
        jLabel75 = new javax.swing.JLabel();
        jLabel76 = new javax.swing.JLabel();
        jLabel80 = new javax.swing.JLabel();
        availCombo = new javax.swing.JComboBox<>();
        conditionCombo = new javax.swing.JComboBox<>();
        warrantyCombo = new javax.swing.JComboBox<>();
        Transactions = new javax.swing.JPanel();
        transactionsHeading7 = new javax.swing.JLabel();
        controlPanelOutter9 = new javax.swing.JPanel();
        controlPanel11 = new javax.swing.JPanel();
        transactionSaveBtn = new javax.swing.JButton();
        transactionInsertBtn = new javax.swing.JButton();
        transactionDeleteBtn = new javax.swing.JButton();
        transactionSearchBtn = new javax.swing.JButton();
        transactionsChangeUser = new javax.swing.JComboBox<>();
        transactionClearBtn = new javax.swing.JButton();
        transactionEditBtn = new javax.swing.JToggleButton();
        jPanel6 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel58 = new javax.swing.JLabel();
        transactionID = new javax.swing.JTextField();
        jLabel59 = new javax.swing.JLabel();
        transactionDate = new javax.swing.JTextField();
        jLabel60 = new javax.swing.JLabel();
        transactionAmount = new javax.swing.JTextField();
        jLabel61 = new javax.swing.JLabel();
        cardPayment = new javax.swing.JRadioButton();
        cashPayment = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        jLabel63 = new javax.swing.JLabel();
        transactionProductID = new javax.swing.JTextField();
        jLabel64 = new javax.swing.JLabel();
        transactionCustomerTele = new javax.swing.JTextField();
        jLabel65 = new javax.swing.JLabel();
        transactionEmployeeID = new javax.swing.JTextField();
        BuyandSell = new javax.swing.JPanel();
        transactionsHeading9 = new javax.swing.JLabel();
        buyControlPanel = new javax.swing.JPanel();
        buyItemBtn = new javax.swing.JButton();
        upRow = new javax.swing.JPanel();
        upBtn = new javax.swing.JLabel();
        upBtnLine = new javax.swing.JPanel();
        downRow = new javax.swing.JPanel();
        downBtn = new javax.swing.JLabel();
        downBtnLine = new javax.swing.JPanel();
        buyViewSearchBox = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        buyViewSearchBtn = new javax.swing.JButton();
        redefineBox = new javax.swing.JComboBox<>();
        buyShowAll = new javax.swing.JButton();
        BuySellOpening = new javax.swing.JPanel();
        buyBtn = new javax.swing.JButton();
        sellBtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        BuyPanel = new javax.swing.JPanel();
        buyProductPane = new javax.swing.JScrollPane();
        buyProductTable = new javax.swing.JTable();
        View = new javax.swing.JPanel();
        transactionsHeading10 = new javax.swing.JLabel();
        viewControlPanel = new javax.swing.JPanel();
        viewBtn = new javax.swing.JButton();
        viewTableNames = new javax.swing.JComboBox<>();
        viewClearBtn = new javax.swing.JButton();
        tableScrollPane = new javax.swing.JScrollPane();
        viewTable = new javax.swing.JTable();
        Stats = new javax.swing.JPanel();
        transactionsHeading11 = new javax.swing.JLabel();
        controlPanelOutter12 = new javax.swing.JPanel();
        statsComboBox = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        statsEmployees = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        employeeMostTransactions = new javax.swing.JTextField();
        avgHourlyRate = new javax.swing.JTextField();
        numPaidWeekly = new javax.swing.JTextField();
        numFlexibleStaff = new javax.swing.JTextField();
        numPartTimeStaff = new javax.swing.JTextField();
        numFullTimeStaff = new javax.swing.JTextField();
        numEmployees = new javax.swing.JTextField();
        statsCustomers = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        numNonmembers = new javax.swing.JTextField();
        numMembers = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        amountCustomers = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        nonMembers = new javax.swing.JTable();
        jScrollPane5 = new javax.swing.JScrollPane();
        allMembers = new javax.swing.JTable();
        statsTransactions = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        amountTransactions = new javax.swing.JTextField();
        amountPaidByCard = new javax.swing.JTextField();
        amountPaidByCash = new javax.swing.JTextField();
        oldestTransaction = new javax.swing.JTextField();
        mostRecentTransaction = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        transactionsSum = new javax.swing.JTextField();
        statsProducts = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        amountProductOSCombo = new javax.swing.JComboBox<>();
        numUsedProducts = new javax.swing.JTextField();
        numProducts = new javax.swing.JTextField();
        numNewProducts = new javax.swing.JTextField();
        numOfAcc = new javax.swing.JTextField();
        avgPriceProduct = new javax.swing.JTextField();
        lowestProductPrice = new javax.swing.JTextField();
        amountProductsPerYear = new javax.swing.JTextField();
        amountProductOS = new javax.swing.JTextField();
        amountProductsYearSpinner = new javax.swing.JSpinner();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setPreferredSize(new java.awt.Dimension(1000, 850));

        Header.setBackground(new java.awt.Color(51, 0, 153));
        Header.setForeground(new java.awt.Color(102, 102, 102));
        Header.setPreferredSize(new java.awt.Dimension(1000, 80));
        Header.setLayout(new java.awt.BorderLayout());

        iconminmaxclose.setBackground(new java.awt.Color(51, 0, 153));
        iconminmaxclose.setPreferredSize(new java.awt.Dimension(250, 100));
        iconminmaxclose.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        closeBtn.setBackground(new java.awt.Color(51, 0, 153));
        closeBtn.setPreferredSize(new java.awt.Dimension(83, 78));
        closeBtn.setLayout(new java.awt.BorderLayout());

        close.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        close.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/cancel.png"))); // NOI18N
        close.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                closeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                closeMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                closeMouseReleased(evt);
            }
        });
        closeBtn.add(close, java.awt.BorderLayout.CENTER);

        iconminmaxclose.add(closeBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 0, -1, 80));

        minBtn.setBackground(new java.awt.Color(51, 0, 153));
        minBtn.setPreferredSize(new java.awt.Dimension(83, 78));
        minBtn.setLayout(new java.awt.BorderLayout());
        iconminmaxclose.add(minBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, -1, 80));

        maxBtn.setBackground(new java.awt.Color(51, 0, 153));
        maxBtn.setPreferredSize(new java.awt.Dimension(83, 0));
        maxBtn.setLayout(new java.awt.BorderLayout());

        fullscreen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        fullscreen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/fullscreen.png"))); // NOI18N
        fullscreen.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                fullscreenMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                fullscreenMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                fullscreenMousePressed(evt);
            }
        });
        maxBtn.add(fullscreen, java.awt.BorderLayout.CENTER);

        iconminmaxclose.add(maxBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 0, -1, 80));

        Header.add(iconminmaxclose, java.awt.BorderLayout.LINE_END);

        getContentPane().add(Header, java.awt.BorderLayout.PAGE_START);

        Menu.setBackground(new java.awt.Color(102, 102, 255));
        Menu.setPreferredSize(new java.awt.Dimension(100, 600));
        Menu.setLayout(new java.awt.BorderLayout());

        MenuIcon.setBackground(new java.awt.Color(51, 0, 153));
        MenuIcon.setPreferredSize(new java.awt.Dimension(100, 160));
        MenuIcon.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        linehidemenu.setBackground(new java.awt.Color(51, 0, 153));
        linehidemenu.setPreferredSize(new java.awt.Dimension(100, 5));

        javax.swing.GroupLayout linehidemenuLayout = new javax.swing.GroupLayout(linehidemenu);
        linehidemenu.setLayout(linehidemenuLayout);
        linehidemenuLayout.setHorizontalGroup(
            linehidemenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        linehidemenuLayout.setVerticalGroup(
            linehidemenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        MenuIcon.add(linehidemenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 5));

        hidemenu.setBackground(new java.awt.Color(51, 0, 153));
        hidemenu.setLayout(new java.awt.BorderLayout());

        hideBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        hideBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/menu.png"))); // NOI18N
        hideBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                hideBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                hideBtnMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                hideBtnMouseReleased(evt);
            }
        });
        hidemenu.add(hideBtn, java.awt.BorderLayout.CENTER);

        MenuIcon.add(hidemenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 5, 100, 50));

        linestats.setBackground(new java.awt.Color(51, 0, 153));
        linestats.setPreferredSize(new java.awt.Dimension(100, 5));

        javax.swing.GroupLayout linestatsLayout = new javax.swing.GroupLayout(linestats);
        linestats.setLayout(linestatsLayout);
        linestatsLayout.setHorizontalGroup(
            linestatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        linestatsLayout.setVerticalGroup(
            linestatsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        MenuIcon.add(linestats, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 55, -1, 5));

        stats.setBackground(new java.awt.Color(51, 0, 153));
        stats.setLayout(new java.awt.BorderLayout());

        statsBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        statsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/stats.png"))); // NOI18N
        statsBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                statsBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                statsBtnMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                statsBtnMouseReleased(evt);
            }
        });
        stats.add(statsBtn, java.awt.BorderLayout.CENTER);

        MenuIcon.add(stats, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 100, 50));

        lineview.setBackground(new java.awt.Color(51, 0, 153));
        lineview.setPreferredSize(new java.awt.Dimension(100, 5));

        javax.swing.GroupLayout lineviewLayout = new javax.swing.GroupLayout(lineview);
        lineview.setLayout(lineviewLayout);
        lineviewLayout.setHorizontalGroup(
            lineviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        lineviewLayout.setVerticalGroup(
            lineviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        MenuIcon.add(lineview, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, -1, 5));

        view.setBackground(new java.awt.Color(51, 0, 153));
        view.setLayout(new java.awt.BorderLayout());

        someviewBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        someviewBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/view2.png"))); // NOI18N
        someviewBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                someviewBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                someviewBtnMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                someviewBtnMouseReleased(evt);
            }
        });
        view.add(someviewBtn, java.awt.BorderLayout.CENTER);

        MenuIcon.add(view, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 100, 50));

        linequestion.setBackground(new java.awt.Color(51, 0, 153));
        linequestion.setPreferredSize(new java.awt.Dimension(100, 5));

        javax.swing.GroupLayout linequestionLayout = new javax.swing.GroupLayout(linequestion);
        linequestion.setLayout(linequestionLayout);
        linequestionLayout.setHorizontalGroup(
            linequestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        linequestionLayout.setVerticalGroup(
            linequestionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        MenuIcon.add(linequestion, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, -1, 5));

        buysell.setBackground(new java.awt.Color(51, 0, 153));
        buysell.setLayout(new java.awt.BorderLayout());

        buysellBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        buysellBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/buysell.png"))); // NOI18N
        buysellBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                buysellBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                buysellBtnMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                buysellBtnMouseReleased(evt);
            }
        });
        buysell.add(buysellBtn, java.awt.BorderLayout.CENTER);

        MenuIcon.add(buysell, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 160, 100, 50));

        Menu.add(MenuIcon, java.awt.BorderLayout.LINE_START);

        menuhide.setBackground(new java.awt.Color(0, 153, 255));
        menuhide.setForeground(new java.awt.Color(255, 255, 255));
        menuhide.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        menuTransactions.setBackground(new java.awt.Color(0, 153, 255));
        menuTransactions.setPreferredSize(new java.awt.Dimension(204, 150));
        menuTransactions.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                menuTransactionsMouseReleased(evt);
            }
        });

        jLabel18.setBackground(new java.awt.Color(255, 255, 255));
        jLabel18.setFont(new java.awt.Font("Sana", 0, 24)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(255, 255, 255));
        jLabel18.setText("Transactions");

        javax.swing.GroupLayout menuTransactionsLayout = new javax.swing.GroupLayout(menuTransactions);
        menuTransactions.setLayout(menuTransactionsLayout);
        menuTransactionsLayout.setHorizontalGroup(
            menuTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuTransactionsLayout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel18)
                .addContainerGap(52, Short.MAX_VALUE))
        );
        menuTransactionsLayout.setVerticalGroup(
            menuTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(menuTransactionsLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel18)
                .addContainerGap(85, Short.MAX_VALUE))
        );

        menuhide.add(menuTransactions, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 190, -1, -1));

        menuCustomers.setBackground(new java.awt.Color(0, 153, 255));
        menuCustomers.setPreferredSize(new java.awt.Dimension(204, 150));
        menuCustomers.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                menuCustomersMouseReleased(evt);
            }
        });
        menuCustomers.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel20.setBackground(new java.awt.Color(255, 255, 255));
        jLabel20.setFont(new java.awt.Font("Sana", 0, 24)); // NOI18N
        jLabel20.setForeground(new java.awt.Color(255, 255, 255));
        jLabel20.setText("Customers");
        menuCustomers.add(jLabel20, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, -1, -1));

        menuhide.add(menuCustomers, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 490, -1, -1));

        menuProducts.setBackground(new java.awt.Color(0, 153, 255));
        menuProducts.setPreferredSize(new java.awt.Dimension(204, 150));
        menuProducts.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                menuProductsMouseReleased(evt);
            }
        });
        menuProducts.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel17.setBackground(new java.awt.Color(255, 255, 255));
        jLabel17.setFont(new java.awt.Font("Sana", 0, 24)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(255, 255, 255));
        jLabel17.setText("Products");
        jLabel17.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                jLabel17ComponentAdded(evt);
            }
        });
        menuProducts.add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, -1, -1));
        jLabel17.setHorizontalAlignment(JLabel.CENTER);

        menuhide.add(menuProducts, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 190));

        menuEmployees.setBackground(new java.awt.Color(0, 153, 255));
        menuEmployees.setPreferredSize(new java.awt.Dimension(204, 150));
        menuEmployees.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                menuEmployeesMouseReleased(evt);
            }
        });
        menuEmployees.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel19.setBackground(new java.awt.Color(255, 255, 255));
        jLabel19.setFont(new java.awt.Font("Sana", 0, 24)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(255, 255, 255));
        jLabel19.setText("Employees");
        menuEmployees.add(jLabel19, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 40, -1, -1));

        menuhide.add(menuEmployees, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 340, -1, -1));

        Menu.add(menuhide, java.awt.BorderLayout.CENTER);

        getContentPane().add(Menu, java.awt.BorderLayout.LINE_START);

        dashboardPanel.setBackground(new java.awt.Color(102, 102, 255));
        dashboardPanel.setPreferredSize(new java.awt.Dimension(900, 850));
        dashboardPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Employees.setVisible(false);
        Employees.setBackground(new java.awt.Color(102, 102, 255));
        Employees.setPreferredSize(new java.awt.Dimension(900, 720));
        Employees.setLayout(new java.awt.BorderLayout());

        transactionsHeading5.setFont(new java.awt.Font("Sana", 0, 48)); // NOI18N
        transactionsHeading5.setForeground(new java.awt.Color(255, 255, 255));
        transactionsHeading5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        transactionsHeading5.setText("Employees");
        transactionsHeading5.setPreferredSize(new java.awt.Dimension(239, 70));
        Employees.add(transactionsHeading5, java.awt.BorderLayout.PAGE_START);

        controlPanelOutter7.setBackground(new java.awt.Color(102, 102, 255));
        controlPanelOutter7.setPreferredSize(new java.awt.Dimension(900, 200));

        controlPanel7.setBackground(new java.awt.Color(102, 102, 255));
        controlPanel7.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        employeeSaveBtn.setBackground(new java.awt.Color(51, 0, 153));
        employeeSaveBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        employeeSaveBtn.setForeground(new java.awt.Color(255, 255, 255));
        employeeSaveBtn.setText("Save");
        employeeSaveBtn.setBorder(null);
        employeeSaveBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        employeeSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeSaveBtnActionPerformed(evt);
            }
        });
        controlPanel7.add(employeeSaveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 60, 116, 34));

        employeeInsertBtn.setBackground(new java.awt.Color(51, 0, 153));
        employeeInsertBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        employeeInsertBtn.setForeground(new java.awt.Color(255, 255, 255));
        employeeInsertBtn.setText("Insert");
        employeeInsertBtn.setBorder(null);
        employeeInsertBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        employeeInsertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeInsertBtnActionPerformed(evt);
            }
        });
        controlPanel7.add(employeeInsertBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 116, 34));

        employeeDeleteBtn.setBackground(new java.awt.Color(51, 0, 153));
        employeeDeleteBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        employeeDeleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        employeeDeleteBtn.setText("Delete");
        employeeDeleteBtn.setBorder(null);
        employeeDeleteBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        employeeDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeDeleteBtnActionPerformed(evt);
            }
        });
        controlPanel7.add(employeeDeleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 116, 34));

        employeeSearchBtn.setBackground(new java.awt.Color(51, 0, 153));
        employeeSearchBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        employeeSearchBtn.setForeground(new java.awt.Color(255, 255, 255));
        employeeSearchBtn.setText("Search");
        employeeSearchBtn.setBorder(null);
        employeeSearchBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        employeeSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeSearchBtnActionPerformed(evt);
            }
        });
        controlPanel7.add(employeeSearchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 0, 116, 34));

        employeeClearBtn.setBackground(new java.awt.Color(51, 0, 153));
        employeeClearBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        employeeClearBtn.setForeground(new java.awt.Color(255, 255, 255));
        employeeClearBtn.setText("Clear");
        employeeClearBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        employeeClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeClearBtnActionPerformed(evt);
            }
        });
        controlPanel7.add(employeeClearBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 0, 116, 34));

        employeeEditBtn.setBackground(new java.awt.Color(51, 0, 153));
        employeeEditBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        employeeEditBtn.setForeground(new java.awt.Color(255, 255, 255));
        employeeEditBtn.setText("Edit");
        employeeEditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeEditBtnActionPerformed(evt);
            }
        });
        controlPanel7.add(employeeEditBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 60, 116, 34));

        javax.swing.GroupLayout controlPanelOutter7Layout = new javax.swing.GroupLayout(controlPanelOutter7);
        controlPanelOutter7.setLayout(controlPanelOutter7Layout);
        controlPanelOutter7Layout.setHorizontalGroup(
            controlPanelOutter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelOutter7Layout.createSequentialGroup()
                .addContainerGap(301, Short.MAX_VALUE)
                .addComponent(controlPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(163, 163, 163))
        );
        controlPanelOutter7Layout.setVerticalGroup(
            controlPanelOutter7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelOutter7Layout.createSequentialGroup()
                .addComponent(controlPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 106, Short.MAX_VALUE))
        );

        Employees.add(controlPanelOutter7, java.awt.BorderLayout.PAGE_END);

        jPanel1.setBackground(new java.awt.Color(102, 102, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(102, 102, 255));
        jPanel2.setPreferredSize(new java.awt.Dimension(900, 470));

        jLabel43.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel43.setForeground(new java.awt.Color(255, 255, 255));
        jLabel43.setText("Employee ID");

        employeeID.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        employeeID.setToolTipText("Field used to search for employees. Also displays employee ID of any employee");
        employeeID.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        employeeID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                employeeIDFocusLost(evt);
            }
        });

        jLabel44.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel44.setForeground(new java.awt.Color(255, 255, 255));
        jLabel44.setText("First Name");

        employeeFirst.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        employeeFirst.setToolTipText("Employees first name");
        employeeFirst.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

        jLabel45.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel45.setForeground(new java.awt.Color(255, 255, 255));
        jLabel45.setText("Surname");

        employeeSurname.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        employeeSurname.setToolTipText("Employees surname");
        employeeSurname.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        employeeSurname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                employeeSurnameActionPerformed(evt);
            }
        });

        jLabel46.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel46.setForeground(new java.awt.Color(255, 255, 255));
        jLabel46.setText("Position");

        employeePosition.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        employeePosition.setToolTipText("Employees position within the store");
        employeePosition.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

        jLabel47.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel47.setForeground(new java.awt.Color(255, 255, 255));
        jLabel47.setText("Contract Type");

        employeeContractType.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        employeeContractType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Full-Time", "Part-Time", "Flexible" }));
        employeeContractType.setToolTipText("Shows if the employee is full-time, part-time etc");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(employeeID)
                .addGap(6, 6, 6))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(employeeContractType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(employeeSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(employeePosition, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel45)
                            .addComponent(jLabel47)
                            .addComponent(jLabel46)
                            .addComponent(jLabel44)
                            .addComponent(jLabel43)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(employeeFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel43)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(employeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel44)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(employeeFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel45)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(employeeSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel46)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(employeePosition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel47)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(employeeContractType, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 86, Short.MAX_VALUE))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {employeeFirst, employeeID, employeePosition, employeeSurname});

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 450, 450));

        jPanel3.setBackground(new java.awt.Color(102, 102, 255));

        jLabel48.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel48.setForeground(new java.awt.Color(255, 255, 255));
        jLabel48.setText("Start Date");

        employeeStartDate.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        employeeStartDate.setToolTipText("Date the employee started in the store");
        employeeStartDate.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        employeeStartDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                employeeStartDateFocusLost(evt);
            }
        });

        jLabel49.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel49.setForeground(new java.awt.Color(255, 255, 255));
        jLabel49.setText("Contract Length");

        jLabel50.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel50.setForeground(new java.awt.Color(255, 255, 255));
        jLabel50.setText("Pay Frequency");

        jLabel51.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel51.setForeground(new java.awt.Color(255, 255, 255));
        jLabel51.setText("Hourly Rate");

        employeeHourlyRate.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        employeeHourlyRate.setToolTipText("The hourly rate of the employee");
        employeeHourlyRate.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        employeeHourlyRate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                employeeHourlyRateFocusLost(evt);
            }
        });

        payFreq.add(payFreqWeekly);
        payFreqWeekly.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        payFreqWeekly.setForeground(new java.awt.Color(255, 255, 255));
        payFreqWeekly.setText("Weekly");

        payFreq.add(payFreqMonthly);
        payFreqMonthly.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        payFreqMonthly.setForeground(new java.awt.Color(255, 255, 255));
        payFreqMonthly.setText("Monthly");
        payFreqMonthly.setToolTipText("How frequent the employee gets paid ");

        employeeContractSpinner.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        employeeContractSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 1, 50, 2));

        employeeLengthDrop.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        employeeLengthDrop.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Months", "Years" }));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(payFreqWeekly)
                        .addGap(18, 18, 18)
                        .addComponent(payFreqMonthly))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(employeeContractSpinner)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(employeeLengthDrop, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel48, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel49, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel50, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel51, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(employeeStartDate, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(employeeHourlyRate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 435, Short.MAX_VALUE)))
                .addGap(15, 15, 15))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel48)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(employeeStartDate, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel49)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(employeeContractSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(employeeLengthDrop, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel50)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(payFreqWeekly)
                    .addComponent(payFreqMonthly))
                .addGap(23, 23, 23)
                .addComponent(jLabel51)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(employeeHourlyRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 162, Short.MAX_VALUE))
        );

        jPanel3Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {employeeHourlyRate, employeeStartDate});

        jPanel1.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 20, 450, 450));

        Employees.add(jPanel1, java.awt.BorderLayout.CENTER);

        dashboardPanel.add(Employees, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        Customers.setVisible(false);
        Customers.setBackground(new java.awt.Color(102, 102, 255));
        Customers.setPreferredSize(new java.awt.Dimension(900, 720));
        Customers.setLayout(new java.awt.BorderLayout());

        transactionsHeading6.setFont(new java.awt.Font("Sana", 0, 48)); // NOI18N
        transactionsHeading6.setForeground(new java.awt.Color(255, 255, 255));
        transactionsHeading6.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        transactionsHeading6.setText("Customers");
        transactionsHeading6.setPreferredSize(new java.awt.Dimension(233, 70));
        Customers.add(transactionsHeading6, java.awt.BorderLayout.PAGE_START);

        controlPanelOutter8.setBackground(new java.awt.Color(102, 102, 255));
        controlPanelOutter8.setPreferredSize(new java.awt.Dimension(900, 200));

        customerControlPanel.setBackground(new java.awt.Color(102, 102, 255));
        customerControlPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        customerSaveBtn.setBackground(new java.awt.Color(51, 0, 153));
        customerSaveBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        customerSaveBtn.setForeground(new java.awt.Color(255, 255, 255));
        customerSaveBtn.setText("Save");
        customerSaveBtn.setBorder(null);
        customerSaveBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        customerSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerSaveBtnActionPerformed(evt);
            }
        });
        customerControlPanel.add(customerSaveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(377, 60, 119, 34));

        customerInsertBtn.setBackground(new java.awt.Color(51, 0, 153));
        customerInsertBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        customerInsertBtn.setForeground(new java.awt.Color(255, 255, 255));
        customerInsertBtn.setText("Insert");
        customerInsertBtn.setBorder(null);
        customerInsertBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        customerInsertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerInsertBtnActionPerformed(evt);
            }
        });
        customerControlPanel.add(customerInsertBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(127, 60, 119, 34));

        customerDeleteBtn.setBackground(new java.awt.Color(51, 0, 153));
        customerDeleteBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        customerDeleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        customerDeleteBtn.setText("Delete");
        customerDeleteBtn.setBorder(null);
        customerDeleteBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        customerDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerDeleteBtnActionPerformed(evt);
            }
        });
        customerControlPanel.add(customerDeleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(2, 60, 119, 34));

        customerSearchBtn.setBackground(new java.awt.Color(51, 0, 153));
        customerSearchBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        customerSearchBtn.setForeground(new java.awt.Color(255, 255, 255));
        customerSearchBtn.setText("Search");
        customerSearchBtn.setBorder(null);
        customerSearchBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        customerSearchBtn.setPreferredSize(new java.awt.Dimension(41, 19));
        customerSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerSearchBtnActionPerformed(evt);
            }
        });
        customerControlPanel.add(customerSearchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(329, 10, 119, 34));

        customerChangeUser.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        customerChangeUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin", "Employee" }));
        customerChangeUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerChangeUserActionPerformed(evt);
            }
        });
        customerControlPanel.add(customerChangeUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(55, 10, -1, 34));

        customerClearBtn.setBackground(new java.awt.Color(51, 0, 153));
        customerClearBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        customerClearBtn.setForeground(new java.awt.Color(255, 255, 255));
        customerClearBtn.setText("Clear");
        customerClearBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        customerClearBtn.setPreferredSize(new java.awt.Dimension(41, 19));
        customerClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerClearBtnActionPerformed(evt);
            }
        });
        customerControlPanel.add(customerClearBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(192, 10, 119, 34));

        customerEditBtn.setBackground(new java.awt.Color(51, 0, 153));
        customerEditBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        customerEditBtn.setForeground(new java.awt.Color(255, 255, 255));
        customerEditBtn.setText("Edit");
        customerEditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerEditBtnActionPerformed(evt);
            }
        });
        customerControlPanel.add(customerEditBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(252, 60, 119, 34));

        javax.swing.GroupLayout controlPanelOutter8Layout = new javax.swing.GroupLayout(controlPanelOutter8);
        controlPanelOutter8.setLayout(controlPanelOutter8Layout);
        controlPanelOutter8Layout.setHorizontalGroup(
            controlPanelOutter8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelOutter8Layout.createSequentialGroup()
                .addGap(201, 201, 201)
                .addComponent(customerControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(203, Short.MAX_VALUE))
        );
        controlPanelOutter8Layout.setVerticalGroup(
            controlPanelOutter8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelOutter8Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(customerControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        Customers.add(controlPanelOutter8, java.awt.BorderLayout.PAGE_END);

        jPanel4.setBackground(new java.awt.Color(102, 102, 255));
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(102, 102, 255));
        jPanel5.setPreferredSize(new java.awt.Dimension(900, 470));

        jLabel52.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel52.setForeground(new java.awt.Color(255, 255, 255));
        jLabel52.setText("Customer Telephone");

        customerTelephone.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        customerTelephone.setToolTipText("Used to search for customers. Also displays the phone number of anyone customer");
        customerTelephone.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        customerTelephone.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerTelephoneFocusLost(evt);
            }
        });

        jLabel53.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel53.setForeground(new java.awt.Color(255, 255, 255));
        jLabel53.setText("First Name");

        customerFirst.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        customerFirst.setToolTipText("Customers first name");
        customerFirst.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        customerFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerFirstActionPerformed(evt);
            }
        });

        jLabel54.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel54.setForeground(new java.awt.Color(255, 255, 255));
        jLabel54.setText("Surname");

        customerSurname.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        customerSurname.setToolTipText("Customers surname ");
        customerSurname.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        customerSurname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                customerSurnameActionPerformed(evt);
            }
        });

        jLabel55.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel55.setForeground(new java.awt.Color(255, 255, 255));
        jLabel55.setText("CVV");

        customerCVV.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        customerCVV.setToolTipText("Customers card CVV number");
        customerCVV.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        customerCVV.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerCVVFocusLost(evt);
            }
        });

        jLabel56.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel56.setForeground(new java.awt.Color(255, 255, 255));
        jLabel56.setText("Is Member");

        jLabel57.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel57.setForeground(new java.awt.Color(255, 255, 255));
        jLabel57.setText("Employee ID");

        customerEmployeeID.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        customerEmployeeID.setToolTipText("Shows the employee ID of the employee who dealt with the customer (returns -1 if online order)");
        customerEmployeeID.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        customerEmployeeID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                customerEmployeeIDFocusLost(evt);
            }
        });

        isMember.add(isMemberTrue);
        isMemberTrue.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        isMemberTrue.setForeground(new java.awt.Color(255, 255, 255));
        isMemberTrue.setText("True");

        isMember.add(isMemberFalse);
        isMemberFalse.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        isMemberFalse.setForeground(new java.awt.Color(255, 255, 255));
        isMemberFalse.setText("False");
        isMemberFalse.setToolTipText("True if the customer is a member, false otherwise");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(customerEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 688, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel57)
                    .addComponent(jLabel56)
                    .addComponent(customerCVV, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel55)
                    .addComponent(customerSurname, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel54)
                    .addComponent(customerFirst, javax.swing.GroupLayout.PREFERRED_SIZE, 694, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel53)
                    .addComponent(jLabel52)
                    .addComponent(customerTelephone, javax.swing.GroupLayout.PREFERRED_SIZE, 684, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(279, 279, 279))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(isMemberTrue)
                .addGap(18, 18, 18)
                .addComponent(isMemberFalse)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {customerCVV, customerEmployeeID, customerFirst, customerSurname, customerTelephone});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel52)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customerTelephone, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(22, 22, 22)
                .addComponent(jLabel53)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(customerFirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel54)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customerSurname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel55)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customerCVV, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel56)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(isMemberTrue)
                    .addComponent(isMemberFalse))
                .addGap(29, 29, 29)
                .addComponent(jLabel57)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(customerEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {customerCVV, customerEmployeeID, customerFirst, customerSurname, customerTelephone});

        jPanel4.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 0, 700, 470));

        Customers.add(jPanel4, java.awt.BorderLayout.CENTER);

        dashboardPanel.add(Customers, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        productPanel.setVisible(false);
        productPanel.setBackground(new java.awt.Color(102, 102, 255));
        productPanel.setPreferredSize(new java.awt.Dimension(900, 720));
        productPanel.setLayout(new java.awt.BorderLayout());

        controlPanelOutter10.setBackground(new java.awt.Color(102, 102, 255));
        controlPanelOutter10.setPreferredSize(new java.awt.Dimension(900, 100));

        productChangeUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin", "Employee", "Customer" }));
        productChangeUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productChangeUserActionPerformed(evt);
            }
        });

        productClearBtn.setBackground(new java.awt.Color(51, 0, 153));
        productClearBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        productClearBtn.setForeground(new java.awt.Color(255, 255, 255));
        productClearBtn.setText("Clear");
        productClearBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        productClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productClearBtnActionPerformed(evt);
            }
        });

        productInsertBtn.setBackground(new java.awt.Color(51, 0, 153));
        productInsertBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        productInsertBtn.setForeground(new java.awt.Color(255, 255, 255));
        productInsertBtn.setText("Insert");
        productInsertBtn.setBorder(null);
        productInsertBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        productInsertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productInsertBtnActionPerformed(evt);
            }
        });

        productEditBtn.setBackground(new java.awt.Color(51, 0, 153));
        productEditBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        productEditBtn.setForeground(new java.awt.Color(255, 255, 255));
        productEditBtn.setText("Edit");
        productEditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productEditBtnActionPerformed(evt);
            }
        });

        productSearchBtn.setBackground(new java.awt.Color(51, 0, 153));
        productSearchBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        productSearchBtn.setForeground(new java.awt.Color(255, 255, 255));
        productSearchBtn.setText("Search");
        productSearchBtn.setBorder(null);
        productSearchBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        productSearchBtn.setPreferredSize(new java.awt.Dimension(41, 19));
        productSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productSearchBtnActionPerformed(evt);
            }
        });

        productDeleteBtn.setBackground(new java.awt.Color(51, 0, 153));
        productDeleteBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        productDeleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        productDeleteBtn.setText("Delete");
        productDeleteBtn.setBorder(null);
        productDeleteBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        productDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productDeleteBtnActionPerformed(evt);
            }
        });

        productSaveBtn.setBackground(new java.awt.Color(51, 0, 153));
        productSaveBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        productSaveBtn.setForeground(new java.awt.Color(255, 255, 255));
        productSaveBtn.setText("Save");
        productSaveBtn.setBorder(null);
        productSaveBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        productSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productSaveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout controlPanelOutter10Layout = new javax.swing.GroupLayout(controlPanelOutter10);
        controlPanelOutter10.setLayout(controlPanelOutter10Layout);
        controlPanelOutter10Layout.setHorizontalGroup(
            controlPanelOutter10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelOutter10Layout.createSequentialGroup()
                .addContainerGap(64, Short.MAX_VALUE)
                .addGroup(controlPanelOutter10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelOutter10Layout.createSequentialGroup()
                        .addComponent(productChangeUser, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(productInsertBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(productEditBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(productDeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(productClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(productSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(productSaveBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40))
        );
        controlPanelOutter10Layout.setVerticalGroup(
            controlPanelOutter10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelOutter10Layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(controlPanelOutter10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(productChangeUser, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productInsertBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productEditBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productDeleteBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(productSaveBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        productPanel.add(controlPanelOutter10, java.awt.BorderLayout.PAGE_END);

        transactionsHeading8.setFont(new java.awt.Font("Sana", 0, 36)); // NOI18N
        transactionsHeading8.setForeground(new java.awt.Color(255, 255, 255));
        transactionsHeading8.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        transactionsHeading8.setText("Products");
        transactionsHeading8.setToolTipText("");
        transactionsHeading8.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transactionsHeading8.setPreferredSize(new java.awt.Dimension(190, 50));
        productPanel.add(transactionsHeading8, java.awt.BorderLayout.PAGE_START);

        jPanel9.setBackground(new java.awt.Color(102, 102, 255));

        jPanel10.setBackground(new java.awt.Color(102, 102, 255));
        jPanel10.setPreferredSize(new java.awt.Dimension(900, 470));

        jLabel66.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel66.setForeground(new java.awt.Color(255, 255, 255));
        jLabel66.setText("Product ID");

        productID.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        productID.setToolTipText("This field is used to search for products, also returns the product ID when searched");
        productID.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        productID.setPreferredSize(new java.awt.Dimension(11, 20));
        productID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                productIDFocusLost(evt);
            }
        });

        jLabel67.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel67.setForeground(new java.awt.Color(255, 255, 255));
        jLabel67.setText("Brand Name");

        productBrandName.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        productBrandName.setToolTipText("The brand name of the product");
        productBrandName.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        productBrandName.setPreferredSize(new java.awt.Dimension(11, 20));

        jLabel68.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel68.setForeground(new java.awt.Color(255, 255, 255));
        jLabel68.setText("Model Year");

        jLabel69.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel69.setForeground(new java.awt.Color(255, 255, 255));
        jLabel69.setText("Price");

        jLabel70.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel70.setForeground(new java.awt.Color(255, 255, 255));
        jLabel70.setText("Product Levels");

        productPriceSpinner.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        productPriceSpinner.setModel(new javax.swing.SpinnerNumberModel(5, 5, 10000, 10));
        productPriceSpinner.setToolTipText("The price of that product");

        productSize.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        productSize.setToolTipText("Displays the dimensions of that product");
        productSize.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        productSize.setPreferredSize(new java.awt.Dimension(11, 20));

        jLabel77.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel77.setForeground(new java.awt.Color(255, 255, 255));
        jLabel77.setText("Size");

        productModelName.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        productModelName.setToolTipText("The model name of the product ");
        productModelName.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        productModelName.setPreferredSize(new java.awt.Dimension(11, 20));

        jLabel81.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel81.setForeground(new java.awt.Color(255, 255, 255));
        jLabel81.setText("Model Name");

        productModelSpinner.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        productModelSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(1585411980000L), new java.util.Date(951429960000L), new java.util.Date(1771970760000L), java.util.Calendar.YEAR));
        productModelSpinner.setToolTipText("The year that product was released");
        productModelSpinner.setEditor(new JSpinner.DateEditor(productModelSpinner,"yyyy"));

        productLevels.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        productLevels.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "VERY HIGH", "HIGH", "LOW", "VERY LOW", "NOT AVAILABLE" }));
        productLevels.setToolTipText("Shows the stock levels of that product");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel10Layout.createSequentialGroup()
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(productBrandName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel67)
                                    .addComponent(productModelName, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel81)
                                    .addComponent(productModelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel68))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                                        .addComponent(jLabel69)
                                        .addGap(399, 399, 399))
                                    .addComponent(productID, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                                    .addComponent(productPriceSpinner, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jLabel66)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(productSize, javax.swing.GroupLayout.PREFERRED_SIZE, 432, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel77)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel70)
                            .addComponent(productLevels, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 444, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        jPanel10Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {productBrandName, productID, productLevels, productModelName, productModelSpinner, productPriceSpinner, productSize});

        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addComponent(jLabel66)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productID, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel67)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productBrandName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel81)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productModelName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel68)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(productModelSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel69)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productPriceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel70)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productLevels, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel77)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {productBrandName, productID, productLevels, productModelName, productModelSpinner, productPriceSpinner, productSize});

        jPanel11.setBackground(new java.awt.Color(102, 102, 255));

        jLabel71.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel71.setForeground(new java.awt.Color(255, 255, 255));
        jLabel71.setText("Screen Size");

        productScreenSize.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        productScreenSize.setToolTipText("Shows the screen size of that product if applicable");
        productScreenSize.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        productScreenSize.setPreferredSize(new java.awt.Dimension(11, 20));

        jLabel72.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel72.setForeground(new java.awt.Color(255, 255, 255));
        jLabel72.setText("Processor");

        productProcessor.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        productProcessor.setToolTipText("Shows the processor of that product if applicable");
        productProcessor.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        productProcessor.setPreferredSize(new java.awt.Dimension(11, 20));

        jLabel73.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel73.setForeground(new java.awt.Color(255, 255, 255));
        jLabel73.setText("RAM");

        productRAM.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        productRAM.setToolTipText("Displays the RAM of that product ");
        productRAM.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        productRAM.setPreferredSize(new java.awt.Dimension(11, 20));

        jLabel74.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel74.setForeground(new java.awt.Color(255, 255, 255));
        jLabel74.setText("Operating System");

        jLabel78.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel78.setForeground(new java.awt.Color(255, 255, 255));
        jLabel78.setText("Storage");

        productStorage.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        productStorage.setToolTipText("Displays the storage of that product");
        productStorage.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        productStorage.setPreferredSize(new java.awt.Dimension(11, 20));
        productStorage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productStorageActionPerformed(evt);
            }
        });

        jLabel79.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel79.setForeground(new java.awt.Color(255, 255, 255));
        jLabel79.setText("Is Accessory");

        operatingSystem.add(Apple);
        Apple.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        Apple.setForeground(new java.awt.Color(255, 255, 255));
        Apple.setText("Apple");

        operatingSystem.add(Windows);
        Windows.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        Windows.setForeground(new java.awt.Color(255, 255, 255));
        Windows.setText("Windows");

        operatingSystem.add(Android);
        Android.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        Android.setForeground(new java.awt.Color(255, 255, 255));
        Android.setText("Android");

        operatingSystem.add(Other);
        Other.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        Other.setForeground(new java.awt.Color(255, 255, 255));
        Other.setText("Other");

        productIsAccToggle.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        productIsAccToggle.setText("Accessory");
        productIsAccToggle.setToolTipText("Toggle is pressed if the product is a Accessory");

        jLabel75.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel75.setForeground(new java.awt.Color(255, 255, 255));
        jLabel75.setText("Availability");

        jLabel76.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel76.setForeground(new java.awt.Color(255, 255, 255));
        jLabel76.setText("Condition");

        jLabel80.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel80.setForeground(new java.awt.Color(255, 255, 255));
        jLabel80.setText("Warranty");

        availCombo.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        availCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TRUE", "FALSE" }));
        availCombo.setToolTipText("True if available, false otherwise");

        conditionCombo.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        conditionCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "NEW", "USED" }));
        conditionCombo.setToolTipText("Displays the condition of any one product");

        warrantyCombo.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        warrantyCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "TRUE", "FALSE" }));
        warrantyCombo.setToolTipText("Shows true if the product has a warranty, false otherwise");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel71)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel79)
                    .addComponent(jLabel78)
                    .addComponent(jLabel73)
                    .addComponent(productScreenSize, javax.swing.GroupLayout.PREFERRED_SIZE, 424, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productRAM, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productStorage, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productIsAccToggle, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel75)
                    .addComponent(availCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel76)
                    .addComponent(conditionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(warrantyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel80))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(productProcessor, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel72)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(Apple)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Windows)
                        .addGap(41, 41, 41)
                        .addComponent(Android)
                        .addGap(33, 33, 33)
                        .addComponent(Other))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(jLabel74)
                        .addGap(139, 139, 139)))
                .addContainerGap())
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {productIsAccToggle, productProcessor, productRAM, productScreenSize, productStorage});

        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jLabel71)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productScreenSize, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel72)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productProcessor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel73)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productRAM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel78)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productStorage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel79)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(productIsAccToggle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel74)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(Apple)
                    .addComponent(Windows)
                    .addComponent(Android)
                    .addComponent(Other))
                .addGap(18, 18, 18)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel11Layout.createSequentialGroup()
                            .addComponent(jLabel75)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(availCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                            .addComponent(jLabel80)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(warrantyCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addComponent(jLabel76)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(conditionCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(140, Short.MAX_VALUE))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {productProcessor, productRAM, productScreenSize, productStorage});

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, 589, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        productPanel.add(jPanel9, java.awt.BorderLayout.CENTER);

        dashboardPanel.add(productPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 620));

        Transactions.setVisible(false);
        Transactions.setBackground(new java.awt.Color(102, 102, 255));
        Transactions.setPreferredSize(new java.awt.Dimension(900, 720));
        Transactions.setLayout(new java.awt.BorderLayout());

        transactionsHeading7.setFont(new java.awt.Font("Sana", 0, 48)); // NOI18N
        transactionsHeading7.setForeground(new java.awt.Color(255, 255, 255));
        transactionsHeading7.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        transactionsHeading7.setText("Transactions");
        transactionsHeading7.setPreferredSize(new java.awt.Dimension(276, 70));
        Transactions.add(transactionsHeading7, java.awt.BorderLayout.PAGE_START);

        controlPanelOutter9.setBackground(new java.awt.Color(102, 102, 255));
        controlPanelOutter9.setPreferredSize(new java.awt.Dimension(900, 200));

        controlPanel11.setBackground(new java.awt.Color(102, 102, 255));
        controlPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        transactionSaveBtn.setBackground(new java.awt.Color(51, 0, 153));
        transactionSaveBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        transactionSaveBtn.setForeground(new java.awt.Color(255, 255, 255));
        transactionSaveBtn.setText("Save");
        transactionSaveBtn.setBorder(null);
        transactionSaveBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transactionSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionSaveBtnActionPerformed(evt);
            }
        });
        controlPanel11.add(transactionSaveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(366, 53, 116, 34));

        transactionInsertBtn.setBackground(new java.awt.Color(51, 0, 153));
        transactionInsertBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        transactionInsertBtn.setForeground(new java.awt.Color(255, 255, 255));
        transactionInsertBtn.setText("Insert");
        transactionInsertBtn.setBorder(null);
        transactionInsertBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transactionInsertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionInsertBtnActionPerformed(evt);
            }
        });
        controlPanel11.add(transactionInsertBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(122, 53, 116, 34));

        transactionDeleteBtn.setBackground(new java.awt.Color(51, 0, 153));
        transactionDeleteBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        transactionDeleteBtn.setForeground(new java.awt.Color(255, 255, 255));
        transactionDeleteBtn.setText("Delete");
        transactionDeleteBtn.setBorder(null);
        transactionDeleteBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transactionDeleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionDeleteBtnActionPerformed(evt);
            }
        });
        controlPanel11.add(transactionDeleteBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 53, 116, 34));

        transactionSearchBtn.setBackground(new java.awt.Color(51, 0, 153));
        transactionSearchBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        transactionSearchBtn.setForeground(new java.awt.Color(255, 255, 255));
        transactionSearchBtn.setText("Search");
        transactionSearchBtn.setBorder(null);
        transactionSearchBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transactionSearchBtn.setPreferredSize(new java.awt.Dimension(41, 19));
        transactionSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionSearchBtnActionPerformed(evt);
            }
        });
        controlPanel11.add(transactionSearchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(311, 0, 116, 34));

        transactionsChangeUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Admin", "Employee" }));
        transactionsChangeUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionsChangeUserActionPerformed(evt);
            }
        });
        controlPanel11.add(transactionsChangeUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(43, 1, -1, 34));

        transactionClearBtn.setBackground(new java.awt.Color(51, 0, 153));
        transactionClearBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        transactionClearBtn.setForeground(new java.awt.Color(255, 255, 255));
        transactionClearBtn.setText("Clear");
        transactionClearBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transactionClearBtn.setPreferredSize(new java.awt.Dimension(41, 19));
        transactionClearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionClearBtnActionPerformed(evt);
            }
        });
        controlPanel11.add(transactionClearBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 1, 116, 34));

        transactionEditBtn.setBackground(new java.awt.Color(51, 0, 153));
        transactionEditBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        transactionEditBtn.setForeground(new java.awt.Color(255, 255, 255));
        transactionEditBtn.setText("Edit");
        transactionEditBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transactionEditBtnActionPerformed(evt);
            }
        });
        controlPanel11.add(transactionEditBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(244, 54, 116, 34));

        javax.swing.GroupLayout controlPanelOutter9Layout = new javax.swing.GroupLayout(controlPanelOutter9);
        controlPanelOutter9.setLayout(controlPanelOutter9Layout);
        controlPanelOutter9Layout.setHorizontalGroup(
            controlPanelOutter9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelOutter9Layout.createSequentialGroup()
                .addGap(224, 224, 224)
                .addComponent(controlPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(194, Short.MAX_VALUE))
        );
        controlPanelOutter9Layout.setVerticalGroup(
            controlPanelOutter9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelOutter9Layout.createSequentialGroup()
                .addComponent(controlPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(112, Short.MAX_VALUE))
        );

        Transactions.add(controlPanelOutter9, java.awt.BorderLayout.PAGE_END);

        jPanel6.setBackground(new java.awt.Color(102, 102, 255));
        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel7.setBackground(new java.awt.Color(102, 102, 255));
        jPanel7.setPreferredSize(new java.awt.Dimension(900, 470));

        jLabel58.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel58.setForeground(new java.awt.Color(255, 255, 255));
        jLabel58.setText("Transaction ID");

        transactionID.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        transactionID.setToolTipText("Used to search for transactions, also shows the transaction ID whenever is searched upon");
        transactionID.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        transactionID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                transactionIDFocusLost(evt);
            }
        });

        jLabel59.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel59.setForeground(new java.awt.Color(255, 255, 255));
        jLabel59.setText("Transaction Date");

        transactionDate.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        transactionDate.setToolTipText("Displays the date of that transaction");
        transactionDate.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        transactionDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                transactionDateFocusLost(evt);
            }
        });

        jLabel60.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel60.setForeground(new java.awt.Color(255, 255, 255));
        jLabel60.setText("Transaction Amount");

        transactionAmount.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        transactionAmount.setToolTipText("Shows the total amount of that transaction");
        transactionAmount.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        transactionAmount.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                transactionAmountFocusLost(evt);
            }
        });

        jLabel61.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel61.setForeground(new java.awt.Color(255, 255, 255));
        jLabel61.setText("Payment Method");

        paymentMethod.add(cardPayment);
        cardPayment.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        cardPayment.setForeground(new java.awt.Color(255, 255, 255));
        cardPayment.setText("Card");
        cardPayment.setToolTipText("Shows if the transaction took card or cash");

        paymentMethod.add(cashPayment);
        cashPayment.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
        cashPayment.setForeground(new java.awt.Color(255, 255, 255));
        cashPayment.setText("Cash");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(transactionID)
                        .addContainerGap())
                    .addComponent(transactionDate, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(transactionAmount)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel60)
                            .addComponent(jLabel58)
                            .addComponent(jLabel59)
                            .addComponent(jLabel61)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addComponent(cardPayment)
                                .addGap(18, 18, 18)
                                .addComponent(cashPayment)))
                        .addGap(0, 296, Short.MAX_VALUE))))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel58)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transactionID, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel59)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(transactionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabel60)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transactionAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jLabel61)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cardPayment)
                    .addComponent(cashPayment))
                .addContainerGap(142, Short.MAX_VALUE))
        );

        jPanel7Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {transactionAmount, transactionDate, transactionID});

        jPanel6.add(jPanel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 450, 470));

        jPanel8.setBackground(new java.awt.Color(102, 102, 255));

        jLabel63.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel63.setForeground(new java.awt.Color(255, 255, 255));
        jLabel63.setText("Product ID");

        transactionProductID.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        transactionProductID.setToolTipText("Shows the product ID of the product that was purchased");
        transactionProductID.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        transactionProductID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                transactionProductIDFocusLost(evt);
            }
        });

        jLabel64.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel64.setForeground(new java.awt.Color(255, 255, 255));
        jLabel64.setText("Customer Telephone");

        transactionCustomerTele.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        transactionCustomerTele.setToolTipText("Displays the telephone number that is associated with this transaction");
        transactionCustomerTele.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        transactionCustomerTele.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                transactionCustomerTeleFocusLost(evt);
            }
        });

        jLabel65.setFont(new java.awt.Font("Sana", 1, 17)); // NOI18N
        jLabel65.setForeground(new java.awt.Color(255, 255, 255));
        jLabel65.setText("Employee ID");

        transactionEmployeeID.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 16)); // NOI18N
        transactionEmployeeID.setToolTipText("Displays the employee ID of the employee who took the transaction (empty if online order)");
        transactionEmployeeID.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
        transactionEmployeeID.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                transactionEmployeeIDFocusLost(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel63)
                            .addComponent(jLabel64)
                            .addComponent(jLabel65)))
                    .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(transactionEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(transactionCustomerTele, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(transactionProductID, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 431, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(19, 19, 19))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel63)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transactionProductID, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel64)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(transactionCustomerTele, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addComponent(jLabel65)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transactionEmployeeID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(221, Short.MAX_VALUE))
        );

        jPanel8Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {transactionCustomerTele, transactionEmployeeID, transactionProductID});

        jPanel6.add(jPanel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(460, 0, 440, 470));

        Transactions.add(jPanel6, java.awt.BorderLayout.CENTER);

        dashboardPanel.add(Transactions, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

        BuyandSell.setVisible(false);
        BuyandSell.setBackground(new java.awt.Color(102, 102, 255));
        BuyandSell.setPreferredSize(new java.awt.Dimension(900, 720));
        BuyandSell.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        transactionsHeading9.setFont(new java.awt.Font("Sana", 0, 48)); // NOI18N
        transactionsHeading9.setForeground(new java.awt.Color(255, 255, 255));
        transactionsHeading9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        transactionsHeading9.setText("Buy / Sell");
        transactionsHeading9.setPreferredSize(new java.awt.Dimension(233, 70));
        BuyandSell.add(transactionsHeading9, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 230, -1));

        buyControlPanel.setVisible(false);
        buyControlPanel.setBackground(new java.awt.Color(102, 102, 255));
        buyControlPanel.setPreferredSize(new java.awt.Dimension(900, 200));

        buyItemBtn.setBackground(new java.awt.Color(51, 0, 153));
        buyItemBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        buyItemBtn.setForeground(new java.awt.Color(255, 255, 255));
        buyItemBtn.setText("Buy");
        buyItemBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buyItemBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyItemBtnActionPerformed(evt);
            }
        });

        upRow.setBackground(new java.awt.Color(102, 102, 255));
        upRow.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        upBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        upBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/uparrow2.png"))); // NOI18N
        upBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                upBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                upBtnMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                upBtnMouseReleased(evt);
            }
        });
        upRow.add(upBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 50, 40));

        upBtnLine.setBackground(new java.awt.Color(102, 102, 255));
        upBtnLine.setPreferredSize(new java.awt.Dimension(40, 5));

        javax.swing.GroupLayout upBtnLineLayout = new javax.swing.GroupLayout(upBtnLine);
        upBtnLine.setLayout(upBtnLineLayout);
        upBtnLineLayout.setHorizontalGroup(
            upBtnLineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        upBtnLineLayout.setVerticalGroup(
            upBtnLineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        upRow.add(upBtnLine, new org.netbeans.lib.awtextra.AbsoluteConstraints(27, 7, 40, 5));

        downRow.setBackground(new java.awt.Color(102, 102, 255));
        downRow.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        downBtn.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        downBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Icons/downarrow.png"))); // NOI18N
        downBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                downBtnMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                downBtnMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                downBtnMouseReleased(evt);
            }
        });
        downRow.add(downBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 50, 40));

        downBtnLine.setBackground(new java.awt.Color(102, 102, 255));
        downBtnLine.setPreferredSize(new java.awt.Dimension(40, 5));

        javax.swing.GroupLayout downBtnLineLayout = new javax.swing.GroupLayout(downBtnLine);
        downBtnLine.setLayout(downBtnLineLayout);
        downBtnLineLayout.setHorizontalGroup(
            downBtnLineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 40, Short.MAX_VALUE)
        );
        downBtnLineLayout.setVerticalGroup(
            downBtnLineLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 5, Short.MAX_VALUE)
        );

        downRow.add(downBtnLine, new org.netbeans.lib.awtextra.AbsoluteConstraints(15, 50, 40, -1));

        buyViewSearchBox.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        buyViewSearchBox.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        buyViewSearchBox.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

        jLabel33.setFont(new java.awt.Font("Sana", 1, 18)); // NOI18N
        jLabel33.setForeground(new java.awt.Color(255, 255, 255));
        jLabel33.setText("Search");

        buyViewSearchBtn.setBackground(new java.awt.Color(51, 0, 153));
        buyViewSearchBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        buyViewSearchBtn.setForeground(new java.awt.Color(255, 255, 255));
        buyViewSearchBtn.setText("Search");
        buyViewSearchBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buyViewSearchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyViewSearchBtnActionPerformed(evt);
            }
        });

        redefineBox.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
        redefineBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Brand", "Name", "Year", "Price", "Condition", "Accessory", "Warranty" }));

        buyShowAll.setBackground(new java.awt.Color(51, 0, 153));
        buyShowAll.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        buyShowAll.setForeground(new java.awt.Color(255, 255, 255));
        buyShowAll.setText("Show All");
        buyShowAll.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buyShowAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyShowAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout buyControlPanelLayout = new javax.swing.GroupLayout(buyControlPanel);
        buyControlPanel.setLayout(buyControlPanelLayout);
        buyControlPanelLayout.setHorizontalGroup(
            buyControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(redefineBox, 0, 240, Short.MAX_VALUE)
                .addGroup(buyControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(buyControlPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(buyShowAll, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 200, Short.MAX_VALUE)
                        .addComponent(buyViewSearchBtn))
                    .addComponent(buyViewSearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel33)
                    .addComponent(buyItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(upRow, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(downRow, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31))
        );

        buyControlPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buyItemBtn, buyShowAll, buyViewSearchBtn});

        buyControlPanelLayout.setVerticalGroup(
            buyControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buyControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(buyControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(buyControlPanelLayout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(buyControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(upRow, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(downRow, javax.swing.GroupLayout.DEFAULT_SIZE, 63, Short.MAX_VALUE)))
                    .addGroup(buyControlPanelLayout.createSequentialGroup()
                        .addComponent(jLabel33)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(buyControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buyViewSearchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(redefineBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(buyControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(buyShowAll, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buyItemBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(buyViewSearchBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(102, Short.MAX_VALUE))
        );

        buyControlPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buyViewSearchBox, redefineBox});

        buyControlPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buyItemBtn, buyShowAll, buyViewSearchBtn});

        BuyandSell.add(buyControlPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 480, 900, 220));

        BuySellOpening.setBackground(new java.awt.Color(102, 102, 255));

        buyBtn.setBackground(new java.awt.Color(51, 0, 153));
        buyBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        buyBtn.setForeground(new java.awt.Color(255, 255, 255));
        buyBtn.setText("BUY");
        buyBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        buyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buyBtnActionPerformed(evt);
            }
        });

        sellBtn.setBackground(new java.awt.Color(51, 0, 153));
        sellBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        sellBtn.setForeground(new java.awt.Color(255, 255, 255));
        sellBtn.setText("SELL");
        sellBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        sellBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sellBtnActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Which action would you like to perform");

        javax.swing.GroupLayout BuySellOpeningLayout = new javax.swing.GroupLayout(BuySellOpening);
        BuySellOpening.setLayout(BuySellOpeningLayout);
        BuySellOpeningLayout.setHorizontalGroup(
            BuySellOpeningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BuySellOpeningLayout.createSequentialGroup()
                .addGap(281, 281, 281)
                .addGroup(BuySellOpeningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(BuySellOpeningLayout.createSequentialGroup()
                        .addComponent(buyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sellBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addContainerGap(271, Short.MAX_VALUE))
        );

        BuySellOpeningLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {buyBtn, sellBtn});

        BuySellOpeningLayout.setVerticalGroup(
            BuySellOpeningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BuySellOpeningLayout.createSequentialGroup()
                .addGap(156, 156, 156)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(BuySellOpeningLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sellBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(169, Short.MAX_VALUE))
        );

        BuySellOpeningLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {buyBtn, sellBtn});

        BuyandSell.add(BuySellOpening, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, 410));

        BuyPanel.setVisible(false);
        BuyPanel.setBackground(new java.awt.Color(102, 102, 255));

        buyProductPane.setToolTipText("All of the products available to buy");

        buyProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        )
        {
            public boolean isCellEditable(int row, int column){
                return false;
            }
        }
    );
    buyProductTable.setEnabled(false);
    buyProductPane.setViewportView(buyProductTable);

    javax.swing.GroupLayout BuyPanelLayout = new javax.swing.GroupLayout(BuyPanel);
    BuyPanel.setLayout(BuyPanelLayout);
    BuyPanelLayout.setHorizontalGroup(
        BuyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(buyProductPane)
    );
    BuyPanelLayout.setVerticalGroup(
        BuyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addComponent(buyProductPane, javax.swing.GroupLayout.DEFAULT_SIZE, 450, Short.MAX_VALUE)
    );

    BuyandSell.add(BuyPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, 900, 450));

    dashboardPanel.add(BuyandSell, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

    View.setVisible(false);
    View.setBackground(new java.awt.Color(102, 102, 255));
    View.setPreferredSize(new java.awt.Dimension(900, 720));
    View.setLayout(new java.awt.BorderLayout());

    transactionsHeading10.setFont(new java.awt.Font("Sana", 0, 48)); // NOI18N
    transactionsHeading10.setForeground(new java.awt.Color(255, 255, 255));
    transactionsHeading10.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    transactionsHeading10.setText("View");
    transactionsHeading10.setPreferredSize(new java.awt.Dimension(233, 70));
    View.add(transactionsHeading10, java.awt.BorderLayout.PAGE_START);

    viewControlPanel.setBackground(new java.awt.Color(102, 102, 255));
    viewControlPanel.setPreferredSize(new java.awt.Dimension(900, 200));

    viewBtn.setBackground(new java.awt.Color(51, 0, 153));
    viewBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    viewBtn.setForeground(new java.awt.Color(255, 255, 255));
    viewBtn.setText("View");
    viewBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    viewBtn.setPreferredSize(new java.awt.Dimension(41, 19));
    viewBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            viewBtnActionPerformed(evt);
        }
    });

    viewTableNames.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
    viewTableNames.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Products", "Transactions", "Customers", "Employees" }));

    viewClearBtn.setBackground(new java.awt.Color(51, 0, 153));
    viewClearBtn.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    viewClearBtn.setForeground(new java.awt.Color(255, 255, 255));
    viewClearBtn.setText("Clear");
    viewClearBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
    viewClearBtn.setPreferredSize(new java.awt.Dimension(41, 19));
    viewClearBtn.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            viewClearBtnActionPerformed(evt);
        }
    });

    javax.swing.GroupLayout viewControlPanelLayout = new javax.swing.GroupLayout(viewControlPanel);
    viewControlPanel.setLayout(viewControlPanelLayout);
    viewControlPanelLayout.setHorizontalGroup(
        viewControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(viewControlPanelLayout.createSequentialGroup()
            .addContainerGap(447, Short.MAX_VALUE)
            .addComponent(viewTableNames, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(viewClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(18, 18, 18)
            .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap())
    );
    viewControlPanelLayout.setVerticalGroup(
        viewControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(viewControlPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(viewControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(viewTableNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(viewClearBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(159, Short.MAX_VALUE))
    );

    viewControlPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {viewBtn, viewTableNames});

    View.add(viewControlPanel, java.awt.BorderLayout.PAGE_END);

    tableScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));

    viewTable.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {},
            {},
            {},
            {}
        },
        new String [] {

        }
    )
    {
        public boolean isCellEditable(int row, int column){
            return false;
        }
    }
    );
    viewTable.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 10)); // NOI18N
    viewTable.setToolTipText("View products relating to the chosen table");
    viewTable.setShowGrid(false);
    tableScrollPane.setViewportView(viewTable);

    View.add(tableScrollPane, java.awt.BorderLayout.CENTER);

    dashboardPanel.add(View, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

    Stats.setVisible(false);
    Stats.setBackground(new java.awt.Color(102, 102, 255));
    Stats.setPreferredSize(new java.awt.Dimension(900, 720));
    Stats.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

    transactionsHeading11.setFont(new java.awt.Font("Sana", 0, 48)); // NOI18N
    transactionsHeading11.setForeground(new java.awt.Color(255, 255, 255));
    transactionsHeading11.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
    transactionsHeading11.setText("Statistics");
    transactionsHeading11.setPreferredSize(new java.awt.Dimension(233, 70));
    Stats.add(transactionsHeading11, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 900, -1));

    controlPanelOutter12.setBackground(new java.awt.Color(102, 102, 255));
    controlPanelOutter12.setPreferredSize(new java.awt.Dimension(900, 200));

    statsComboBox.setFont(new java.awt.Font("Sana", 0, 14)); // NOI18N
    statsComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Products", "Transactions", "Employees", "Customers" }));
    statsComboBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            statsComboBoxItemStateChanged(evt);
        }
    });

    jLabel1.setFont(new java.awt.Font("Sana", 1, 18)); // NOI18N
    jLabel1.setForeground(new java.awt.Color(255, 255, 255));
    jLabel1.setText("View statistics relating to");

    javax.swing.GroupLayout controlPanelOutter12Layout = new javax.swing.GroupLayout(controlPanelOutter12);
    controlPanelOutter12.setLayout(controlPanelOutter12Layout);
    controlPanelOutter12Layout.setHorizontalGroup(
        controlPanelOutter12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelOutter12Layout.createSequentialGroup()
            .addContainerGap(372, Short.MAX_VALUE)
            .addGroup(controlPanelOutter12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(statsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel1))
            .addGap(337, 337, 337))
    );
    controlPanelOutter12Layout.setVerticalGroup(
        controlPanelOutter12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(controlPanelOutter12Layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(statsComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(142, Short.MAX_VALUE))
    );

    Stats.add(controlPanelOutter12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 520, -1, 200));

    statsEmployees.setVisible(false);
    statsEmployees.setBackground(new java.awt.Color(102, 102, 255));
    statsEmployees.setPreferredSize(new java.awt.Dimension(900, 440));

    jLabel3.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel3.setForeground(new java.awt.Color(255, 255, 255));
    jLabel3.setText("Number of Employees");

    jLabel5.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel5.setForeground(new java.awt.Color(255, 255, 255));
    jLabel5.setText("Amount of Full Time Staff");

    jLabel23.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel23.setForeground(new java.awt.Color(255, 255, 255));
    jLabel23.setText("Amount of Part Time Staff");

    jLabel24.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel24.setForeground(new java.awt.Color(255, 255, 255));
    jLabel24.setText("Amount of Flexible Staff");

    jLabel25.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel25.setForeground(new java.awt.Color(255, 255, 255));
    jLabel25.setText("Number of People Paid Weekly");

    jLabel26.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel26.setForeground(new java.awt.Color(255, 255, 255));
    jLabel26.setText("Average Hourly Rate");

    jLabel27.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel27.setForeground(new java.awt.Color(255, 255, 255));
    jLabel27.setText("Employee With Most Transactions");

    employeeMostTransactions.setEditable(false);
    employeeMostTransactions.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    employeeMostTransactions.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    avgHourlyRate.setEditable(false);
    avgHourlyRate.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    avgHourlyRate.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    numPaidWeekly.setEditable(false);
    numPaidWeekly.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    numPaidWeekly.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    numFlexibleStaff.setEditable(false);
    numFlexibleStaff.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    numFlexibleStaff.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    numPartTimeStaff.setEditable(false);
    numPartTimeStaff.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    numPartTimeStaff.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    numFullTimeStaff.setEditable(false);
    numFullTimeStaff.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    numFullTimeStaff.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    numEmployees.setEditable(false);
    numEmployees.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    numEmployees.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    javax.swing.GroupLayout statsEmployeesLayout = new javax.swing.GroupLayout(statsEmployees);
    statsEmployees.setLayout(statsEmployeesLayout);
    statsEmployeesLayout.setHorizontalGroup(
        statsEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(statsEmployeesLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(statsEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel27)
                .addComponent(jLabel26)
                .addComponent(jLabel25)
                .addComponent(jLabel24)
                .addComponent(jLabel23)
                .addComponent(jLabel5)
                .addComponent(jLabel3))
            .addGap(18, 18, 18)
            .addGroup(statsEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(numEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(numFullTimeStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(numPartTimeStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(numFlexibleStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(numPaidWeekly, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(avgHourlyRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(employeeMostTransactions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(343, Short.MAX_VALUE))
    );

    statsEmployeesLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {avgHourlyRate, employeeMostTransactions, numEmployees, numFlexibleStaff, numFullTimeStaff, numPaidWeekly, numPartTimeStaff});

    statsEmployeesLayout.setVerticalGroup(
        statsEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(statsEmployeesLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(statsEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(numEmployees, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel3))
            .addGap(18, 18, Short.MAX_VALUE)
            .addGroup(statsEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel5)
                .addComponent(numFullTimeStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel23)
                .addComponent(numPartTimeStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel24)
                .addComponent(numFlexibleStaff, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel25)
                .addComponent(numPaidWeekly, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel26)
                .addComponent(avgHourlyRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsEmployeesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel27)
                .addComponent(employeeMostTransactions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(138, 138, 138))
    );

    statsEmployeesLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {avgHourlyRate, employeeMostTransactions, numEmployees, numFlexibleStaff, numFullTimeStaff, numPaidWeekly, numPartTimeStaff});

    Stats.add(statsEmployees, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, 440));

    statsCustomers.setVisible(false);
    statsCustomers.setBackground(new java.awt.Color(102, 102, 255));
    statsCustomers.setPreferredSize(new java.awt.Dimension(900, 440));

    jLabel13.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel13.setForeground(new java.awt.Color(255, 255, 255));
    jLabel13.setText("Number of Members");

    jLabel28.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel28.setForeground(new java.awt.Color(255, 255, 255));
    jLabel28.setText("Number of Non-Members");

    jLabel29.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel29.setForeground(new java.awt.Color(255, 255, 255));
    jLabel29.setText("List of Members");

    numNonmembers.setEditable(false);
    numNonmembers.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    numNonmembers.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    numMembers.setEditable(false);
    numMembers.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    numMembers.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    jLabel30.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel30.setForeground(new java.awt.Color(255, 255, 255));
    jLabel30.setText("List of Non-Members");

    amountCustomers.setEditable(false);
    amountCustomers.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    amountCustomers.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    jLabel31.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel31.setForeground(new java.awt.Color(255, 255, 255));
    jLabel31.setText("Amount of Customers");

    nonMembers.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null}
        },
        new String [] {
            "First Name", "Surname", "Telephone"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    jScrollPane4.setViewportView(nonMembers);

    allMembers.setModel(new javax.swing.table.DefaultTableModel(
        new Object [][] {
            {null, null, null},
            {null, null, null},
            {null, null, null},
            {null, null, null}
        },
        new String [] {
            "First Name", "Surname", "Telephone"
        }
    ) {
        Class[] types = new Class [] {
            java.lang.String.class, java.lang.String.class, java.lang.String.class
        };
        boolean[] canEdit = new boolean [] {
            false, false, false
        };

        public Class getColumnClass(int columnIndex) {
            return types [columnIndex];
        }

        public boolean isCellEditable(int rowIndex, int columnIndex) {
            return canEdit [columnIndex];
        }
    });
    jScrollPane5.setViewportView(allMembers);

    javax.swing.GroupLayout statsCustomersLayout = new javax.swing.GroupLayout(statsCustomers);
    statsCustomers.setLayout(statsCustomersLayout);
    statsCustomersLayout.setHorizontalGroup(
        statsCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(statsCustomersLayout.createSequentialGroup()
            .addGroup(statsCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(statsCustomersLayout.createSequentialGroup()
                    .addGap(6, 6, 6)
                    .addGroup(statsCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel31)
                        .addComponent(jLabel13)
                        .addComponent(jLabel28))
                    .addGap(18, 18, 18)
                    .addGroup(statsCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(numNonmembers)
                        .addComponent(numMembers, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                        .addComponent(amountCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(statsCustomersLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(statsCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel29))
                    .addGap(18, 18, 18)
                    .addGroup(statsCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel30))))
            .addContainerGap(160, Short.MAX_VALUE))
    );

    statsCustomersLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {amountCustomers, numMembers, numNonmembers});

    statsCustomersLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jScrollPane4, jScrollPane5});

    statsCustomersLayout.setVerticalGroup(
        statsCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statsCustomersLayout.createSequentialGroup()
            .addGroup(statsCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(amountCustomers, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel31))
            .addGap(18, 18, 18)
            .addGroup(statsCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel13)
                .addComponent(numMembers, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel28)
                .addComponent(numNonmembers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(39, 39, 39)
            .addGroup(statsCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel29)
                .addComponent(jLabel30))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(statsCustomersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap())
    );

    statsCustomersLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {numMembers, numNonmembers});

    statsCustomersLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jScrollPane4, jScrollPane5});

    Stats.add(statsCustomers, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, 440));

    statsTransactions.setVisible(false);
    statsTransactions.setBackground(new java.awt.Color(102, 102, 255));
    statsTransactions.setPreferredSize(new java.awt.Dimension(900, 440));

    jLabel14.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel14.setForeground(new java.awt.Color(255, 255, 255));
    jLabel14.setText("Amount of Transactions");

    jLabel15.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel15.setForeground(new java.awt.Color(255, 255, 255));
    jLabel15.setText("Amount Paid  by Card");

    jLabel16.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel16.setForeground(new java.awt.Color(255, 255, 255));
    jLabel16.setText("Amount Paid by Cash");

    jLabel21.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel21.setForeground(new java.awt.Color(255, 255, 255));
    jLabel21.setText("Oldest Transaction");

    jLabel22.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel22.setForeground(new java.awt.Color(255, 255, 255));
    jLabel22.setText("Most Recent Transaction");

    amountTransactions.setEditable(false);
    amountTransactions.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    amountTransactions.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    amountPaidByCard.setEditable(false);
    amountPaidByCard.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    amountPaidByCard.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    amountPaidByCash.setEditable(false);
    amountPaidByCash.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    amountPaidByCash.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    oldestTransaction.setEditable(false);
    oldestTransaction.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    oldestTransaction.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    mostRecentTransaction.setEditable(false);
    mostRecentTransaction.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    mostRecentTransaction.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    jLabel32.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel32.setForeground(new java.awt.Color(255, 255, 255));
    jLabel32.setText("Sum Transaction Amounts");

    transactionsSum.setEditable(false);
    transactionsSum.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    transactionsSum.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    javax.swing.GroupLayout statsTransactionsLayout = new javax.swing.GroupLayout(statsTransactions);
    statsTransactions.setLayout(statsTransactionsLayout);
    statsTransactionsLayout.setHorizontalGroup(
        statsTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(statsTransactionsLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(statsTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(statsTransactionsLayout.createSequentialGroup()
                    .addGroup(statsTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel22)
                        .addComponent(jLabel14)
                        .addComponent(jLabel15)
                        .addComponent(jLabel16)
                        .addComponent(jLabel21))
                    .addGap(18, 18, 18)
                    .addGroup(statsTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                        .addComponent(amountTransactions, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(amountPaidByCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(amountPaidByCash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(oldestTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(mostRecentTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(transactionsSum, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addComponent(jLabel32))
            .addContainerGap(414, Short.MAX_VALUE))
    );

    statsTransactionsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {amountPaidByCard, amountPaidByCash, amountTransactions, mostRecentTransaction, oldestTransaction, transactionsSum});

    statsTransactionsLayout.setVerticalGroup(
        statsTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(statsTransactionsLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(statsTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel14)
                .addComponent(amountTransactions, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(amountPaidByCard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel16)
                .addComponent(amountPaidByCash, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel21)
                .addComponent(oldestTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel22)
                .addComponent(mostRecentTransaction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsTransactionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel32)
                .addComponent(transactionsSum, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(152, Short.MAX_VALUE))
    );

    statsTransactionsLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {amountPaidByCard, amountPaidByCash, amountTransactions, mostRecentTransaction, oldestTransaction, transactionsSum});

    Stats.add(statsTransactions, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, 440));

    statsProducts.setVisible(false);
    statsProducts.setBackground(new java.awt.Color(102, 102, 255));
    statsProducts.setPreferredSize(new java.awt.Dimension(900, 440));

    jLabel2.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel2.setForeground(new java.awt.Color(255, 255, 255));
    jLabel2.setText("Total Number of Products");

    jLabel6.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel6.setForeground(new java.awt.Color(255, 255, 255));
    jLabel6.setText("Total Number of Used Products");

    jLabel7.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel7.setForeground(new java.awt.Color(255, 255, 255));
    jLabel7.setText("Total Number of New Products");

    jLabel8.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel8.setForeground(new java.awt.Color(255, 255, 255));
    jLabel8.setText("Total Number of Accessorys");

    jLabel9.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel9.setForeground(new java.awt.Color(255, 255, 255));
    jLabel9.setText("Average Price of Product");

    jLabel10.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel10.setForeground(new java.awt.Color(255, 255, 255));
    jLabel10.setText("Lowest Price of Product");

    jLabel11.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel11.setForeground(new java.awt.Color(255, 255, 255));
    jLabel11.setText("Amount of Products With OS");

    jLabel12.setFont(new java.awt.Font("Sana", 0, 18)); // NOI18N
    jLabel12.setForeground(new java.awt.Color(255, 255, 255));
    jLabel12.setText("Amount of Products Per Year");

    amountProductOSCombo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Apple", "Windows", "Android", "Other" }));
    amountProductOSCombo.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            amountProductOSComboItemStateChanged(evt);
        }
    });

    numUsedProducts.setEditable(false);
    numUsedProducts.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    numUsedProducts.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    numProducts.setEditable(false);
    numProducts.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    numProducts.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
    numProducts.setPreferredSize(new java.awt.Dimension(11, 34));

    numNewProducts.setEditable(false);
    numNewProducts.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    numNewProducts.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    numOfAcc.setEditable(false);
    numOfAcc.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    numOfAcc.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    avgPriceProduct.setEditable(false);
    avgPriceProduct.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    avgPriceProduct.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    lowestProductPrice.setEditable(false);
    lowestProductPrice.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    lowestProductPrice.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    amountProductsPerYear.setEditable(false);
    amountProductsPerYear.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    amountProductsPerYear.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));

    amountProductOS.setEditable(false);
    amountProductOS.setHorizontalAlignment(javax.swing.JTextField.CENTER);
    amountProductOS.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(75, 0, 102), 2, true));
    amountProductOS.setPreferredSize(new java.awt.Dimension(11, 34));

    amountProductsYearSpinner.setFont(new java.awt.Font(".AppleSystemUIFont", 0, 14)); // NOI18N
    amountProductsYearSpinner.setModel(new javax.swing.SpinnerDateModel(new java.util.Date(1424815200000L), new java.util.Date(1235512800000L), new java.util.Date(1740434400000L), java.util.Calendar.YEAR));
    amountProductsYearSpinner.setEditor(new JSpinner.DateEditor(amountProductsYearSpinner,"yyyy"));
    amountProductsYearSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
        public void stateChanged(javax.swing.event.ChangeEvent evt) {
            amountProductsYearSpinnerStateChanged(evt);
        }
    });

    javax.swing.GroupLayout statsProductsLayout = new javax.swing.GroupLayout(statsProducts);
    statsProducts.setLayout(statsProductsLayout);
    statsProductsLayout.setHorizontalGroup(
        statsProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(statsProductsLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(statsProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel6)
                .addComponent(jLabel2)
                .addComponent(jLabel7)
                .addComponent(jLabel8)
                .addComponent(jLabel9)
                .addComponent(jLabel10)
                .addComponent(jLabel12)
                .addComponent(jLabel11))
            .addGap(18, 18, 18)
            .addGroup(statsProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                .addComponent(numProducts, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(numUsedProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(numNewProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(numOfAcc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(avgPriceProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(lowestProductPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(amountProductOS, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(amountProductsPerYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(amountProductOSCombo, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(amountProductsYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addContainerGap(102, Short.MAX_VALUE))
    );

    statsProductsLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {amountProductsPerYear, avgPriceProduct, lowestProductPrice, numNewProducts, numOfAcc, numProducts, numUsedProducts});

    statsProductsLayout.setVerticalGroup(
        statsProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statsProductsLayout.createSequentialGroup()
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(statsProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(numProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addGroup(statsProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel6)
                .addComponent(numUsedProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel7)
                .addComponent(numNewProducts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel8)
                .addComponent(numOfAcc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel9)
                .addComponent(avgPriceProduct, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel10)
                .addComponent(lowestProductPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel11)
                .addComponent(amountProductOSCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(amountProductOS, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(18, 18, 18)
            .addGroup(statsProductsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel12)
                .addComponent(amountProductsPerYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(amountProductsYearSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(43, 43, 43))
    );

    statsProductsLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {amountProductsPerYear, avgPriceProduct, lowestProductPrice, numNewProducts, numOfAcc, numProducts, numUsedProducts});

    Stats.add(statsProducts, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 70, -1, 440));

    dashboardPanel.add(Stats, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, -1));

    getContentPane().add(dashboardPanel, java.awt.BorderLayout.CENTER);

    setSize(new java.awt.Dimension(1000, 716));
    setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public void clickMenu(JPanel h1, JPanel h2, JPanel h3, JPanel h4, int numberbool) {
        try{
            switch (numberbool) {
                case 1 -> {
                    h1.setBackground(new Color(5, 10, 46));
                    h2.setBackground(new Color(51, 0, 153));
                    h3.setBackground(new Color(51, 0, 153));
                    h4.setBackground(new Color(51, 0, 153));
                }

                case 2 -> {
                    h2.setBackground(new Color(5, 10, 46));
                    h1.setBackground(new Color(51, 0, 153));
                    h3.setBackground(new Color(51, 0, 153));
                    h4.setBackground(new Color(51, 0, 153));
                }

                case 3 -> {
                    h3.setBackground(new Color(5, 10, 46));
                    h2.setBackground(new Color(51, 0, 153));
                    h1.setBackground(new Color(51, 0, 153));
                    h4.setBackground(new Color(51, 0, 153));
                }

                case 4 -> {
                    h4.setBackground(new Color(5, 10, 46));
                    h2.setBackground(new Color(51, 0, 153));
                    h1.setBackground(new Color(51, 0, 153));
                    h3.setBackground(new Color(51, 0, 153));
                }
            }
        } catch(Exception e){
            System.out.println(e);
        }
    }

    public void hideShow(JPanel menushowhide, boolean dashboard, JLabel button) {
        try {
            if (dashboard == true) {
                menushowhide.setPreferredSize(new Dimension(270, menushowhide.getHeight()));
                changeImage(button, "/Icons/back-48px.png");
            } else {
                menushowhide.setPreferredSize(new Dimension(100, menushowhide.getHeight()));
                changeImage(button, "/Icons/menu.png");
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void changeImage(JLabel button, String resourceimg) {
        try{
            ImageIcon aimg = new ImageIcon(getClass().getResource(resourceimg));
            button.setIcon(aimg);
        } catch(Exception e){
            System.out.println(e);
        }
    }

    public void updateDashboard(String newDash) {
        try{
            productPanel.setVisible(false);
            Transactions.setVisible(false);
            Employees.setVisible(false);
            Customers.setVisible(false);
            BuyandSell.setVisible(false);
            View.setVisible(false);
            Stats.setVisible(false);
            switch (newDash) {
                case "products" -> productPanel.setVisible(true);

                case "transactions" -> Transactions.setVisible(true);

                case "employees" -> Employees.setVisible(true);

                case "customers" -> Customers.setVisible(true);

                case "buyandsell" -> {
                    BuyandSell.setVisible(true);
                    BuySellOpening.setVisible(true);
                    BuyPanel.setVisible(false);
                    buyControlPanel.setVisible(false);
                    viewProductBuyTable = 0;
                }

                case "view" -> View.setVisible(true);                

                case "stats" -> Stats.setVisible(true);  

                case "empty" -> dashboardPanel.setVisible(true);      

                default -> productPanel.setVisible(true);
            }
        } catch(Exception e){
            System.out.println(e);
        }
    }

    public void changeColor(JPanel hover, Color rand) {
        try {
            hover.setBackground(rand);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void closeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseEntered
        try {
            changeColor(closeBtn, new Color(25, 29, 74));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_closeMouseEntered

    private void closeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseExited
        try {
            changeColor(closeBtn, new Color(51, 0, 153));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_closeMouseExited

    private void fullscreenMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fullscreenMouseEntered
        try {
            changeColor(maxBtn, new Color(25, 29, 74));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_fullscreenMouseEntered

    private void fullscreenMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fullscreenMouseExited
        try {
            changeColor(maxBtn, new Color(51, 0, 153));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_fullscreenMouseExited

    private void hideBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hideBtnMouseEntered
        try {
            changeColor(linehidemenu, new Color(247, 78, 105));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_hideBtnMouseEntered

    private void hideBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hideBtnMouseExited
        try {
            changeColor(linehidemenu, new Color(51, 0, 153));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_hideBtnMouseExited


    private void statsBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statsBtnMouseEntered
        try {
            changeColor(linestats, new Color(255, 166, 77));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_statsBtnMouseEntered

    private void statsBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statsBtnMouseExited
        try {
            changeColor(linestats, new Color(51, 0, 153));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_statsBtnMouseExited

    private void closeMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_closeMouseReleased
        try {
            System.exit(0);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_closeMouseReleased

    private void hideBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_hideBtnMouseReleased
        try{
            clickMenu(hidemenu, stats, buysell, view, 1);
            // Create void for method hide and show panels menu 
            if (a == true) {
                hideShow(Menu, a, hideBtn);
                SwingUtilities.updateComponentTreeUI(this);
                a = false;

                // Create method change image
            } else {
                hideShow(Menu, a, hideBtn);
                SwingUtilities.updateComponentTreeUI(this);
                a = true;
            }
        } catch(Exception e){
            System.out.println(e);
        }

    }//GEN-LAST:event_hideBtnMouseReleased

    private void statsBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_statsBtnMouseReleased
        try {
            clickMenu(hidemenu, stats, buysell, view, 2);
            updateDashboard("stats");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_statsBtnMouseReleased

    private void someviewBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_someviewBtnMouseExited
        try {
            changeColor(lineview, new Color(51, 0, 153));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_someviewBtnMouseExited

    private void someviewBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_someviewBtnMouseReleased
        try {
            clickMenu(hidemenu, stats, buysell, view, 4);
            updateDashboard("view");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_someviewBtnMouseReleased

    private void someviewBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_someviewBtnMouseEntered
        try {
            changeColor(lineview, new Color(102, 255, 255));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_someviewBtnMouseEntered

    private void jLabel17ComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_jLabel17ComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel17ComponentAdded

    private void menuProductsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuProductsMouseReleased
        try {
            updateDashboard("products");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuProductsMouseReleased

    private void menuTransactionsMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuTransactionsMouseReleased
        try {
            updateDashboard("transactions");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_menuTransactionsMouseReleased

    private void menuEmployeesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuEmployeesMouseReleased
        try{
            String userInformation = JOptionPane.showInputDialog(null, "Please enter admin ID: ", "Admin Login", JOptionPane.INFORMATION_MESSAGE);  
            if(userInformation == null) return;

            else if(userInformation.matches(adminKey)){
                JOptionPane.showMessageDialog(null, "Successful Login", "Success", JOptionPane.INFORMATION_MESSAGE);
                updateDashboard("employees");
            } else{
                JOptionPane.showMessageDialog(null, "Incorrect Details", "Invalid", JOptionPane.ERROR_MESSAGE);
                updateDashboard("empty");
                return;

            }
        } catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_menuEmployeesMouseReleased

    private void menuCustomersMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_menuCustomersMouseReleased
        try {
            updateDashboard("customers");
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_menuCustomersMouseReleased

    private void employeeInsertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeInsertBtnActionPerformed
        JTextField fields[] = {
            employeeFirst,
            employeeSurname, 
            employeePosition,
            employeeStartDate,
            employeeHourlyRate
        };
        
        if (checkFields(fields)) {
            try {
//            int ID = Integer.parseInt(employeeID.getText());
                String first = employeeFirst.getText();
                String surname = employeeSurname.getText();
                
                String pos = employeePosition.getText();
                String contract = String.valueOf(employeeContractType.getSelectedItem());
                String startDate = employeeStartDate.getText();
                
                String contractLength = String.valueOf(employeeContractSpinner.getValue()) + " " + employeeLengthDrop.getSelectedItem();
                String payFrequency = null;
                String hourlyRate = employeeHourlyRate.getText();
                
                if (payFreqWeekly.isSelected()) {
                    payFrequency = payFreqWeekly.getText();
                } else if (payFreqMonthly.isSelected()) {
                    payFrequency = payFreqMonthly.getText();
                }

                // Make connection called conn to the url 
                try {
                    Connection conn = DriverManager.getConnection(url);
                    try ( Statement stmt = conn.createStatement()) {
                        stmt.executeUpdate(new Employee(first, surname, pos, contract, startDate, contractLength, payFrequency, hourlyRate).generateInsertIntoStatement());
                        JOptionPane.showMessageDialog(rootPane, "Inserted Record");
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                }
                
            } catch (Exception e) {
                JOptionPane.showMessageDialog(rootPane, "Error: " + e);
            }
        } else{
            JOptionPane.showMessageDialog(null, "Please fill all fields", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        

    }//GEN-LAST:event_employeeInsertBtnActionPerformed

    private void customerInsertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerInsertBtnActionPerformed
        JTextField[] customerFields = {
            customerFirst,
            customerSurname,
            customerCVV,
            customerEmployeeID
        };
        
        if (!checkFields(customerFields)) {
            JOptionPane.showMessageDialog(null, "Please fill all fields", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else{
            try {
                String tele = customerTelephone.getText();
                String first = customerFirst.getText();
                String surname = customerSurname.getText();
                String cvv = customerCVV.getText();
                int employeeid = Integer.parseInt(customerEmployeeID.getText());
                int member = 0;
                if (isMemberTrue.isSelected()) {
                    member = 1;
                } else if (isMemberFalse.isSelected()) {
                    member = 0;
                }
                // Make connection called conn to the url 
                try {
                    Connection conn = DriverManager.getConnection(url);
                    try ( Statement stmt = conn.createStatement()) {
                        stmt.executeUpdate(new Customer(tele, employeeid, first, surname, cvv, member).generateInsertIntoStatement());
                        JOptionPane.showMessageDialog(rootPane, "Inserted Record: " + tele);
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                }
                
            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_customerInsertBtnActionPerformed

    private void transactionInsertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionInsertBtnActionPerformed
        JTextField[] fields = {
            transactionProductID,
            transactionDate,
            customerTelephone,
            transactionAmount,
            transactionEmployeeID
        };
        if (checkFields(fields)) {
            try {
//            int id = Integer.parseInt(transactionID.getText());
                String date = transactionDate.getText();
                String amount = transactionAmount.getText();
                String paymentMethod = cashPayment.isSelected() ? "CASH" : "CARD";
                int productID = Integer.parseInt(transactionProductID.getText());
                String customerTele = transactionCustomerTele.getText();
                int employeeID = Integer.parseInt(transactionEmployeeID.getText());

                // Make connection called conn to the url 
                try {
                    Connection conn = DriverManager.getConnection(url);
                    try ( Statement stmt = conn.createStatement()) {
                        stmt.executeUpdate(new Transaction(productID, employeeID, date, amount, paymentMethod, customerTele).generateInsertIntoStatement());
                        JOptionPane.showMessageDialog(rootPane, "Inserted Record");
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                }
                
            } catch (Exception e) {
                System.out.println(e);
            }
        } else{
           JOptionPane.showMessageDialog(null, "Please fill all fields", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_transactionInsertBtnActionPerformed

    private void productInsertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productInsertBtnActionPerformed
        if (!checkFields(productAreas)) {
            JOptionPane.showMessageDialog(null, "Please fill all fields", "ERROR", JOptionPane.ERROR_MESSAGE);                
            
        } else {
            try {
                String brand = productBrandName.getText();
                String modelYear = String.valueOf(new Date(String.valueOf(productModelSpinner.getValue())).getYear() + 1900);
                
                String modelName = productModelName.getText();
                
                String price = String.valueOf(productPriceSpinner.getValue());
                String levels = String.valueOf(productLevels.getSelectedItem());
                String size = productSize.getText();
                
                String screensize = productScreenSize.getText();
                String processor = productProcessor.getText();
                String RAM = productRAM.getText();
                
                int warranty = String.valueOf(warrantyCombo.getSelectedItem()).matches("TRUE") ? 1 : 0;
                String condition = String.valueOf(conditionCombo.getSelectedItem());
                int avail = String.valueOf(availCombo.getSelectedItem()).matches("TRUE") ? 1 : 0;
                
                String storage = productStorage.getText();
                
                int isAcc;
                if (productIsAccToggle.isSelected()) {
                    isAcc = 1;
                } else {
                    isAcc = 0;
                }
                
                String OS = null;
                if (Apple.isSelected()) {
                    OS = Apple.getText();
                } else if (Windows.isSelected()) {
                    OS = Windows.getText();
                } else if (Android.isSelected()) {
                    OS = Android.getText();
                } else if (Other.isSelected()) {
                    OS = Other.getText();
                }
                
                // Make connection called conn to the url 
                try {
                    Connection conn = DriverManager.getConnection(url);
                    try ( Statement stmt = conn.createStatement()) {
                        stmt.executeUpdate(new Product(brand, modelName, modelYear, price, levels, avail, condition, size, screensize, processor, RAM, OS, storage, isAcc, warranty).generateInsertIntoStatement());
                        JOptionPane.showMessageDialog(rootPane, "Inserted Record");
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                }
                
            } catch (Exception e) {
                throwError(e);
            }
        }

    }//GEN-LAST:event_productInsertBtnActionPerformed
    
    private void throwError(Exception e){
        try {
            JOptionPane.showMessageDialog(null, "An error occurred: " + e, "ERROR", JOptionPane.ERROR_MESSAGE);
        } catch (HeadlessException headlessException) {
            JOptionPane.showMessageDialog(null, "An error occurred", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
    }
    
    private void productIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_productIDFocusLost
        try{
            validateNumberBox(productID);
        } catch(Exception e){
            throwError(e);
        }
    }//GEN-LAST:event_productIDFocusLost

    private void employeeIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_employeeIDFocusLost
        try{
            validateNumberBox(employeeID);
        } catch(Exception e){
            throwError(e);
        }
    }//GEN-LAST:event_employeeIDFocusLost

    private void customerCVVFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerCVVFocusLost
        try{
            validateNumberBox(customerCVV);
            if(customerCVV.getText().length() != 3){
                JOptionPane.showMessageDialog(rootPane, "CVV number should be three digits long", "ERROR", JOptionPane.ERROR_MESSAGE);
                customerCVV.setText(null);
            }
        } catch(Exception e){
            throwError(e);
        }
    }//GEN-LAST:event_customerCVVFocusLost

    private void customerEmployeeIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerEmployeeIDFocusLost
        try{
        validateNumberBox(customerEmployeeID);
        } catch(Exception e){
            throwError(e);
        }
    }//GEN-LAST:event_customerEmployeeIDFocusLost

    private void transactionIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transactionIDFocusLost
        try{
            validateNumberBox(transactionID);
        } catch(Exception e){
            throwError(e);
        }
    }//GEN-LAST:event_transactionIDFocusLost

    private void transactionProductIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transactionProductIDFocusLost
        try{
            validateNumberBox(transactionProductID);
        } catch(Exception e){
            throwError(e);
        }
    }//GEN-LAST:event_transactionProductIDFocusLost

    private void transactionCustomerTeleFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transactionCustomerTeleFocusLost
        try{
            if(!validateTelephone(transactionCustomerTele)){
                JOptionPane.showMessageDialog(null, "please enter phone number in format: 111-222-333", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch(Exception e){
            throwError(e);
        }
    }//GEN-LAST:event_transactionCustomerTeleFocusLost

    private void transactionEmployeeIDFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transactionEmployeeIDFocusLost
        try{
            validateNumberBox(transactionEmployeeID);
        } catch(Exception e){
            throwError(e);
        }
    }//GEN-LAST:event_transactionEmployeeIDFocusLost

    private void transactionAmountFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transactionAmountFocusLost
        try {
            validateNumberBox(transactionAmount);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error: " + e);
        }

    }//GEN-LAST:event_transactionAmountFocusLost

    private void employeeHourlyRateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_employeeHourlyRateFocusLost
        try {
            validateNumberBox(employeeHourlyRate);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error: " + e);
        }
    }//GEN-LAST:event_employeeHourlyRateFocusLost

    private void customerChangeUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerChangeUserActionPerformed
        try {
            String currentUser = checkUserPrivileges(String.valueOf(customerChangeUser.getSelectedItem()), customerChangeUser);
            if (currentUser != null) {
                updateUserPrivileges(currentUser, customerSaveBtn, customerEditBtn, customerDeleteBtn, customerSearchBtn, customerInsertBtn);
            }
        } catch (Exception e) {
            throwError(e);
        }
    }//GEN-LAST:event_customerChangeUserActionPerformed

    private void productChangeUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productChangeUserActionPerformed
        try{
            String currentUser = checkUserPrivileges(String.valueOf(productChangeUser.getSelectedItem()), productChangeUser);
            if(currentUser != null){
                updateUserPrivileges(currentUser, productSaveBtn, productEditBtn, productDeleteBtn, productSearchBtn, productInsertBtn);
            } 
        } catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_productChangeUserActionPerformed

    private void transactionsChangeUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionsChangeUserActionPerformed
        try {
            String currentUser = checkUserPrivileges(String.valueOf(transactionsChangeUser.getSelectedItem()), transactionsChangeUser);
            if (currentUser != null) {
                updateUserPrivileges(currentUser, transactionSaveBtn, transactionEditBtn, transactionDeleteBtn, transactionSearchBtn, transactionInsertBtn);
            }            
        } catch (Exception e) {
            throwError(e);
        }
    }//GEN-LAST:event_transactionsChangeUserActionPerformed

    private void buysellBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buysellBtnMouseEntered
        try {
            changeColor(linequestion, new Color(0, 255, 0));
        } catch (Exception e) {
            throwError(e);
        }
    }//GEN-LAST:event_buysellBtnMouseEntered

    private void buysellBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buysellBtnMouseExited
        try {
            changeColor(linequestion, new Color(51, 0, 153));
        } catch (Exception e) {
            throwError(e);
        }
    }//GEN-LAST:event_buysellBtnMouseExited

    private void buysellBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_buysellBtnMouseReleased
        try {
            clickMenu(hidemenu, stats, buysell, view, 3);
            updateDashboard("buyandsell");
        } catch (Exception e) {
            throwError(e);
        }
    }//GEN-LAST:event_buysellBtnMouseReleased

    private void employeeClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeClearBtnActionPerformed
        clearEmployee();
    }//GEN-LAST:event_employeeClearBtnActionPerformed

    public void clearEmployee(){
        try {
            employeeID.setText(null);
            employeeFirst.setText(null);
            employeeSurname.setText(null);

            employeePosition.setText(null);
            employeeContractType.getSelectedItem();
            employeeStartDate.setText(null);

            employeeContractSpinner.setValue(1); 
            employeeLengthDrop.setSelectedIndex(0);

            payFreq.clearSelection();
            employeeHourlyRate.setText(null);
            
            employeeContractType.setSelectedIndex(0);
            
        } catch (Exception e) {
            System.out.println(e);
        }
    }
    private void customerClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerClearBtnActionPerformed
        clearCustomer();
    }//GEN-LAST:event_customerClearBtnActionPerformed

    public void clearCustomer(){
        try {
            customerTelephone.setText(null);
            customerFirst.setText(null);
            customerSurname.setText(null);
            customerCVV.setText(null);
            customerEmployeeID.setText(null);
            isMember.clearSelection();
           

        } catch (Exception e) {
            System.out.println(e);
        }
    }
    
    private void transactionClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionClearBtnActionPerformed
        clearTransaction();
    }//GEN-LAST:event_transactionClearBtnActionPerformed

    public void clearTransaction(){
        try {
            transactionID.setText(null);
            transactionDate.setText(null);
            transactionAmount.setText(null);
            transactionProductID.setText(null);
            transactionCustomerTele.setText(null);
            transactionEmployeeID.setText(null);
            paymentMethod.clearSelection();

        } catch (Exception e) {
            System.out.println(e);
        }
    }
    private void productClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productClearBtnActionPerformed
        clearProduct();
    }//GEN-LAST:event_productClearBtnActionPerformed

    public void clearProduct(){
        try{
            productID.setText(null);
            productBrandName.setText(null);
            productModelSpinner.setValue(new Date(System.currentTimeMillis()));
            productModelName.setText(null);
            
            productPriceSpinner.setValue(5);
            // changel
            productLevels.setSelectedIndex(0);
            productSize.setText(null);

            productScreenSize.setText(null);
            productProcessor.setText(null);
            productRAM.setText(null);

            productStorage.setText(null);
            productIsAccToggle.setSelected(false);
            warrantyGroup.clearSelection();

            conditionGroup.clearSelection();
            isAvail.clearSelection();
            operatingSystem.clearSelection();
            
        } catch(Exception e){
            System.out.println(e);
        }
    }
    
    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        System.out.println("url: " + url);
        try{
            DefaultTableModel table = new DefaultTableModel();
           
            switch(String.valueOf(viewTableNames.getSelectedItem())){
                case "Products" -> {
                    table.addColumn("ID");
                    table.addColumn("Brand Name");
                    table.addColumn("Model Name");
                    table.addColumn("Year");
                    table.addColumn("Price");
                    table.addColumn("Levels");
                    table.addColumn("Availability");
                    table.addColumn("Condition");
                    table.addColumn("Size");
                    table.addColumn("Screen Size");
                    table.addColumn("Processor");
                    table.addColumn("RAM");
                    table.addColumn("OS");
                    table.addColumn("Storage");
                    table.addColumn("Accessory");
                    table.addColumn("Warranty");
                    try(Connection conn = DriverManager.getConnection(url)){
                        Statement stmt = conn.createStatement();
                        ResultSet result = stmt.executeQuery("SELECT * FROM Products");
                        
                        while(result.next()){
                            table.addRow(new Object[]{
                                result.getString("productID"),
                                result.getString("productBrandName"),
                                result.getString("productModelName"),
                                result.getString("productModelYear"),
                                result.getString("productPrice"),
                                result.getString("currentProductLevels"),
                                result.getString("productAvailability"),
                                result.getString("productCondition"),
                                result.getString("productSize"),
                                result.getString("productScreenSize"),
                                result.getString("productProcessor"),
                                result.getString("productRAM"),
                                result.getString("productHasOS"),
                                result.getString("productStorage"),
                                result.getString("productIsAccessory"),
                                result.getString("productHasWarranty")});
                        }
                    } catch(Exception e){
                        JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                    }
                    viewTable.setModel(table);
                } 

                case "Employees" -> {
                    table.addColumn("ID");
                    table.addColumn("First Name");
                    table.addColumn("Surname");
                    table.addColumn("Position");
                    table.addColumn("Contract Type");
                    table.addColumn("Start Date");
                    table.addColumn("Contract Length");
                    table.addColumn("Pay Frequency");
                    table.addColumn("Hourly Rate");
                    try(Connection conn = DriverManager.getConnection(url)){
                        Statement stmt = conn.createStatement();
                        ResultSet result = stmt.executeQuery("SELECT * FROM Employees");
                        
                        while(result.next()){
                            table.addRow(new Object[]{result.getString("employeeID"),
                                result.getString("employeeFirst"),
                                result.getString("employeeSurname"),
                                result.getString("employeePosition"),
                                result.getString("employeeTypeOfContract"),
                                result.getString("employeeContractStartDate"),
                                result.getString("employeeContractLength"),
                                result.getString("employeePayFrequency"),
                                result.getString("employeeHourlyRate")});
                        }
                         
                    } catch(Exception e){
                        JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                    }
                    
                    viewTable.setModel(table);
                }

                case "Customers" -> {
                    table.addColumn("Telephone");
                    table.addColumn("Employee ID");
                    table.addColumn("Customer First");
                    table.addColumn("Customer Last");
                    table.addColumn("Card CVV");
                    table.addColumn("Is Member");
                    try(Connection conn = DriverManager.getConnection(url)){
                        Statement stmt = conn.createStatement();
                        ResultSet result = stmt.executeQuery("SELECT * FROM Customers");
                        
                        
                        while(result.next()){
                            table.addRow(new Object[]{
                                result.getString("customerTelephone"),
                                result.getString("employeeID"),
                                result.getString("customerFirst"),
                                result.getString("customerLast"),
                                result.getString("customerCardCVV"),
                                result.getString("customerIsMember")});
                        }
                    } catch(Exception e){
                        JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                    }
                    viewTable.setModel(table);
                }

                case "Transactions" -> {   
                    table.addColumn("Transaction ID");
                    table.addColumn("Product ID");
                    table.addColumn("Employee ID");
                    table.addColumn("Transaction Date");
                    table.addColumn("Transaction Amount");
                    table.addColumn("Payment Method");
                    table.addColumn("Customer Telephone");
                    try(Connection conn = DriverManager.getConnection(url)){
                        Statement stmt = conn.createStatement();
                        ResultSet result = stmt.executeQuery("SELECT * FROM Transactions");
                        
                        while(result.next()){
                            table.addRow(new Object[]{
                                result.getString("transactionID"),
                                result.getString("productID"),
                                result.getString("employeeID"),
                                result.getString("transactionDate"),
                                result.getString("transactionAmount"),
                                result.getString("transactionPaymentMethod"),
                                result.getString("customerTelephone")});
                            
                        }
                        
                    } catch(Exception e){
                        JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                    }
                    viewTable.setModel(table);
                }
            }
        } catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error: " + e);
        }
    }//GEN-LAST:event_viewBtnActionPerformed

    private void viewClearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewClearBtnActionPerformed
        try {
            viewTable.setModel(new DefaultTableModel());
        } catch (Exception e) {
            throwError(e);
        }
    }//GEN-LAST:event_viewClearBtnActionPerformed

    private void employeeDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeDeleteBtnActionPerformed
        try{
            Connection conn = DriverManager.getConnection(url);
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(new Employee().generateSearchStatement("employeeID", Integer.parseInt(employeeID.getText()), "Employees"));
            if(result.next()){
                stmt.close();
                conn = DriverManager.getConnection(url);
                stmt = conn.createStatement();
                stmt.executeUpdate(new Employee().generateDeleteRecordStatement("employeeID", Integer.parseInt(employeeID.getText()), "Employees"));
                JOptionPane.showMessageDialog(rootPane, "Record Deleted at ID: " + employeeID.getText());
                clearEmployee();
                stmt.close();
            } else{
                JOptionPane.showMessageDialog(rootPane, "Record does not exist");
            }

        } catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error: " + e);
        }
    }//GEN-LAST:event_employeeDeleteBtnActionPerformed

    private void employeeSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeSearchBtnActionPerformed
        try{
            Connection conn = DriverManager.getConnection(url);
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(new Employee().generateSearchStatement("employeeID", Integer.parseInt(employeeID.getText()), "Employees"));
            if(result.next()){
                    employeeID.setText(result.getString("employeeID"));
                    employeeFirst.setText(result.getString("employeeFirst"));
                    employeeSurname.setText(result.getString("employeeSurname"));

                    employeePosition.setText(result.getString("employeePosition"));
                    employeeContractType.setSelectedItem(result.getString("employeeTypeOfContract"));
                    employeeStartDate.setText(result.getString("employeeContractStartDate"));

                    String lengthSplit[] = result.getString("employeeContractLength").split("\\W+");
                    employeeContractSpinner.setValue(Integer.parseInt(lengthSplit[0]));
                    employeeLengthDrop.setSelectedItem(lengthSplit[1]);

                    String payFrequency = result.getString("employeePayFrequency");
                    if(payFrequency.matches(payFreqWeekly.getText())){
                        payFreqWeekly.setSelected(true);
                    } else{
                        payFreqMonthly.setSelected(true);
                    }

                    employeeHourlyRate.setText(result.getString("employeeHourlyRate"));
                    JOptionPane.showMessageDialog(rootPane, "Record found: " + employeeID.getText());
                    stmt.close();
            } else{
                JOptionPane.showMessageDialog(rootPane, "No record found");
            }
            
        } catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error occurred: " + e);
        }
    }//GEN-LAST:event_employeeSearchBtnActionPerformed

    private void employeeEditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeEditBtnActionPerformed
        try {
            if (!employeeID.getText().isEmpty()) {
                hideSideMenu();
                JTextField[] employeeAreas = {
                    employeeFirst, employeeSurname, employeePosition, employeeStartDate, employeeHourlyRate                
                };
                
                JButton[] employeeButtons = {
                    employeeInsertBtn, employeeClearBtn, employeeSearchBtn, employeeDeleteBtn
                };
                
                JLabel[] menuOptions = {
                    hideBtn, statsBtn, someviewBtn, buysellBtn
                };
                
                String conLen = String.valueOf(employeeContractSpinner.getValue()) + " " + String.valueOf(employeeLengthDrop.getSelectedItem());
                
                Color changeBorderColor;
                if (employeeEditBtn.isSelected()) {
                    changeBorderColor = new Color(0, 255, 255);
                    employeeContractType.setBorder(BorderFactory.createLineBorder(changeBorderColor, 2, true));
                    employeeContractSpinner.setBorder(BorderFactory.createLineBorder(changeBorderColor, 2, true));
                    employeeLengthDrop.setBorder(BorderFactory.createLineBorder(changeBorderColor, 2, true));
                    for (int i = 0; i < employeeButtons.length; i++) {
                        employeeButtons[i].setVisible(false);
                        menuOptions[i].setVisible(false);
                    }
                    employeeID.setEditable(false);
                    
                } else {
                    changeBorderColor = new Color(75, 0, 102);
                    employeeContractType.setBorder(javax.swing.BorderFactory.createEmptyBorder());
                    employeeContractSpinner.setBorder(javax.swing.BorderFactory.createEmptyBorder());
                    employeeLengthDrop.setBorder(javax.swing.BorderFactory.createEmptyBorder());
                    for (int i = 0; i < employeeButtons.length; i++) {
                        employeeButtons[i].setVisible(true);
                        menuOptions[i].setVisible(true);
                    }
                    employeeID.setEditable(true);
                }
                
                for (JTextField employeeArea : employeeAreas) {
                    employeeArea.setBorder(BorderFactory.createLineBorder(changeBorderColor, 2, true));
                }
                employeeID.setBorder(BorderFactory.createLineBorder(changeBorderColor, 2, true));
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please enter the ID of the employee you would like to edit");
            }
            
        } catch (Exception e) {
            throwError(e);
        }
        
    }//GEN-LAST:event_employeeEditBtnActionPerformed

    private void employeeSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeSaveBtnActionPerformed
        try {
            if (employeeEditBtn.isSelected()) {
                try {
                    String first = employeeFirst.getText();
                    String surname = employeeSurname.getText();
                    
                    String pos = employeePosition.getText();
                    String contract = String.valueOf(employeeContractType.getSelectedItem());
                    String startDate = employeeStartDate.getText();
                    
                    String contractLength = String.valueOf(employeeContractSpinner.getValue()) + " " + employeeLengthDrop.getSelectedItem();
                    String payFrequency = payFreqWeekly.isSelected() ? payFreqWeekly.getText() : payFreqMonthly.isSelected() ? payFreqMonthly.getText() : null;
                    String hourlyRate = employeeHourlyRate.getText();
                    
                    Connection conn = DriverManager.getConnection(url);
                    Statement stmt = conn.createStatement();
                    ResultSet result = stmt.executeQuery(new Employee().generateSearchStatement("employeeID", Integer.parseInt(employeeID.getText()), "Employees"));
                    
                    if (result.next()) {
                        stmt.close();
                        try {
                            conn = DriverManager.getConnection(url);
                            stmt = conn.createStatement();
                            stmt.executeUpdate(new Employee(first, surname, pos, contract, startDate, contractLength, payFrequency, hourlyRate).generateEditStatement(Integer.parseInt(employeeID.getText())));
                            JOptionPane.showMessageDialog(rootPane, "Record Updated");
                            stmt.close();
                        } catch (SQLException e) {
                            JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Record does not exist");
                    }
                    
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Save button only accessible in edit mode");
            }
        } catch (HeadlessException headlessException) {
            throwError(headlessException);
        }
        
    }//GEN-LAST:event_employeeSaveBtnActionPerformed

    private void transactionSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionSearchBtnActionPerformed
        try{
            Connection conn = DriverManager.getConnection(url);
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(new Transaction().generateSearchStatement("transactionID", Integer.parseInt(transactionID.getText()), "Transactions"));
            if(result.next()){
                transactionID.setText(result.getString("transactionID"));
                transactionProductID.setText(result.getString("productID"));
                transactionEmployeeID.setText(result.getString("employeeID"));

                transactionDate.setText(result.getString("transactionDate"));
                String method = result.getString("transactionPaymentMethod").matches("CASH") ? "CASH" : "CARD";
                if(method.matches("CASH")){
                    cashPayment.setSelected(true);
                } else{
                    cardPayment.setSelected(true);
                }
                
                transactionAmount.setText(result.getString("transactionAmount"));
                transactionCustomerTele.setText(result.getString("customerTelephone"));
                JOptionPane.showMessageDialog(rootPane, "Record found: " + transactionID.getText());
                stmt.close();
            } else{
                JOptionPane.showMessageDialog(rootPane, "No record found");
            }
            
        } catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error occurred: " + e);
        }
    }//GEN-LAST:event_transactionSearchBtnActionPerformed

    private void transactionDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionDeleteBtnActionPerformed
        try{
            Connection conn = DriverManager.getConnection(url);
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(new Transaction().generateSearchStatement("transactionID", Integer.parseInt(transactionID.getText()), "Transactions"));
            if(result.next()){
                stmt.close();
                conn = DriverManager.getConnection(url);
                stmt = conn.createStatement();
                stmt.executeUpdate(new Transaction().generateDeleteRecordStatement("transactionID", Integer.parseInt(transactionID.getText()), "Transactions"));
                JOptionPane.showMessageDialog(rootPane, "Record Deleted at ID: " + transactionID.getText());
                clearTransaction();
                stmt.close();
            } else{
                JOptionPane.showMessageDialog(rootPane, "Record does not exist");
            }

        } catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error: " + e);
        }
    }//GEN-LAST:event_transactionDeleteBtnActionPerformed

    private void transactionEditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionEditBtnActionPerformed
        try {
            if (!transactionID.getText().isEmpty()) {
                hideSideMenu();
                JTextField[] transactionAreas = {
                    transactionDate, transactionAmount, transactionProductID, transactionCustomerTele, transactionEmployeeID                
                };
                
                JButton[] transactionButtons = {
                    transactionInsertBtn, transactionClearBtn, transactionSearchBtn, transactionDeleteBtn
                };
                
                JLabel[] menuOptions = {
                    hideBtn, statsBtn, someviewBtn, buysellBtn
                };
                
                Color changeBorderColor;
                if (transactionEditBtn.isSelected()) {
                    changeBorderColor = new Color(0, 255, 255);
                    for (int i = 0; i < transactionButtons.length; i++) {
                        transactionButtons[i].setVisible(false);
                        menuOptions[i].setVisible(false);
                    }
                    transactionID.setEditable(false);
                    transactionsChangeUser.setVisible(false);
                    
                } else {
                    changeBorderColor = new Color(75, 0, 102);
                    for (int i = 0; i < transactionButtons.length; i++) {
                        transactionButtons[i].setVisible(true);
                        menuOptions[i].setVisible(true);
                    }
                    transactionID.setEditable(true);
                    transactionsChangeUser.setVisible(true);
                    
                }
                
                for (JTextField transactionArea : transactionAreas) {
                    transactionArea.setBorder(BorderFactory.createLineBorder(changeBorderColor, 2, true));
                }
                transactionID.setBorder(BorderFactory.createLineBorder(changeBorderColor, 2, true));
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please enter the ID of the transaction you would like to edit");
            }
        } catch (Exception e) {
            throwError(e);
        }
    }//GEN-LAST:event_transactionEditBtnActionPerformed

    private void transactionSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transactionSaveBtnActionPerformed
        try {
            if (transactionEditBtn.isSelected()) {
                try {
//                int id = Integer.parseInt(transactionID.getText());
                    String date = transactionDate.getText();
                    String amount = transactionAmount.getText();
                    int productID = Integer.parseInt(transactionProductID.getText());
                    String tele = transactionCustomerTele.getText();
                    int employeeID = Integer.parseInt(transactionEmployeeID.getText());                    
                    String payMethod = cashPayment.isSelected() ? "CASH" : cardPayment.isSelected() ? "CARD" : null;
                    System.out.println("product: " + productID + ", employee: " + employeeID);
                    
                    Connection conn = DriverManager.getConnection(url);
                    Statement stmt = conn.createStatement();
                    ResultSet result = stmt.executeQuery(new Transaction().generateSearchStatement("transactionID", Integer.parseInt(transactionID.getText()), "Transactions"));
                    
                    if (result.next()) {
                        stmt.close();
                        try {
                            conn = DriverManager.getConnection(url);
                            stmt = conn.createStatement();
                            stmt.executeUpdate(new Transaction(productID, employeeID, date, amount, payMethod, tele).generateEditStatement(Integer.parseInt(transactionID.getText())));
                            JOptionPane.showMessageDialog(rootPane, "Record Updated");
                            stmt.close();
                        } catch (SQLException e) {
                            JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Record does not exist");
                    }
                    
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Save button only accessible in edit mode");
            }
        } catch (HeadlessException headlessException) {
            throwError(headlessException);
        }
    }//GEN-LAST:event_transactionSaveBtnActionPerformed

    private void customerSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerSearchBtnActionPerformed
        try{
            Connection conn = DriverManager.getConnection(url);
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(new Customer().generateSearchStatementStringID("customerTelephone", customerTelephone.getText(), "Customers"));
            if(result.next()){
                customerTelephone.setText(result.getString("customerTelephone"));
                customerFirst.setText(result.getString("customerFirst"));
                customerSurname.setText(result.getString("customerLast"));

                customerCVV.setText(result.getString("customerCardCVV"));
                if(result.getString("customerIsMember").matches("1")){
                    isMemberTrue.setSelected(true);
                } else{
                    isMemberFalse.setSelected(true);
                }
                customerEmployeeID.setText(result.getString("employeeID"));
                
                JOptionPane.showMessageDialog(rootPane, "Record found: " + customerTelephone.getText());
                stmt.close();
            } else{
                JOptionPane.showMessageDialog(rootPane, "No record found");
            }
            
        } catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error occurred: " + e);
        }
    }//GEN-LAST:event_customerSearchBtnActionPerformed

    private void customerDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerDeleteBtnActionPerformed
        try{
            Connection conn = DriverManager.getConnection(url);
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(new Customer().generateSearchStatementStringID("customerTelephone", customerTelephone.getText(), "Customers"));
            if(result.next()){
                stmt.close();
                conn = DriverManager.getConnection(url);
                stmt = conn.createStatement();
                stmt.executeUpdate(new Customer().generateDeleteRecordStatementStringID("customerTelephone", customerTelephone.getText(), "Customers"));
                JOptionPane.showMessageDialog(rootPane, "Record Deleted at ID: " + customerTelephone.getText());
                clearCustomer();
                stmt.close();
            } else{
                JOptionPane.showMessageDialog(rootPane, "Record does not exist");
            }

        } catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error: " + e);
        }
    }//GEN-LAST:event_customerDeleteBtnActionPerformed

    private void customerEditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerEditBtnActionPerformed
        try {
            if (!customerTelephone.getText().isEmpty()) {
                hideSideMenu();
                JTextField[] customerAreas = {
                    customerFirst, customerSurname, customerCVV, customerEmployeeID                
                };
                
                JButton[] customerButtons = {
                    customerInsertBtn, customerClearBtn, customerSearchBtn, customerDeleteBtn
                };
                
                JLabel[] menuOptions = {
                    hideBtn, statsBtn, someviewBtn, buysellBtn
                };
                
                Color changeBorderColor;
                if (customerEditBtn.isSelected()) {
                    changeBorderColor = new Color(0, 255, 255);
                    for (int i = 0; i < customerButtons.length; i++) {
                        customerButtons[i].setVisible(false);
                        menuOptions[i].setVisible(false);
                    }
                    customerChangeUser.setVisible(false);
                    customerTelephone.setEditable(false);
                } else {
                    changeBorderColor = new Color(75, 0, 102);
                    for (int i = 0; i < customerButtons.length; i++) {
                        customerButtons[i].setVisible(true);
                        menuOptions[i].setVisible(true);
                    }
                    customerChangeUser.setVisible(true);
                    customerTelephone.setEditable(true);
                }
                
                for (JTextField customerArea : customerAreas) {
                    customerArea.setBorder(BorderFactory.createLineBorder(changeBorderColor, 2, true));
                }
                customerTelephone.setBorder(BorderFactory.createLineBorder(changeBorderColor, 2, true));
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please enter the telephone of the customer you would like to edit");
            }
            
        } catch (Exception e) {
            throwError(e);
        }
    }//GEN-LAST:event_customerEditBtnActionPerformed

    private void customerSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerSaveBtnActionPerformed
        try {
            if (customerEditBtn.isSelected()) {
                try {
                    String tele = customerTelephone.getText();
                    String first = customerFirst.getText();
                    String surname = customerSurname.getText();
                    String cvv = customerCVV.getText();
                    int employeeid = Integer.parseInt(customerEmployeeID.getText());
                    int member = 0;
                    
                    if (isMemberTrue.isSelected()) {
                        member = 1;
                    } else if (isMemberFalse.isSelected()) {
                        member = 0;
                    }
                    
                    Connection conn = DriverManager.getConnection(url);
                    Statement stmt = conn.createStatement();
                    ResultSet result = stmt.executeQuery(new Customer().generateSearchStatementStringID("customerTelephone", customerTelephone.getText(), "Customers"));
                    if (result.next()) {
                        stmt.close();
                        try {
                            conn = DriverManager.getConnection(url);
                            stmt = conn.createStatement();
                            stmt.executeUpdate(new Customer(tele, employeeid, first, surname, cvv, member).generateEditStatement());
                            JOptionPane.showMessageDialog(rootPane, "Record Updated: " + tele);
                            stmt.close();
                        } catch (SQLException e) {
                            System.out.println(e);
                            JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Record does not exist");
                    }
                    
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Save button only accessible in edit mode");
            }
        } catch (HeadlessException headlessException) {
            throwError(headlessException);
        }
    }//GEN-LAST:event_customerSaveBtnActionPerformed

    private void productSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productSearchBtnActionPerformed
    try{
        Connection conn = DriverManager.getConnection(url);
        Statement stmt = conn.createStatement();
        ResultSet result = stmt.executeQuery(new Product().generateSearchStatement("productID", Integer.parseInt(productID.getText()), "Products"));
        SimpleDateFormat formalDate = new SimpleDateFormat("yyyyMMdd");
        if(result.next()){
            productID.setText(result.getString("productID"));
            productBrandName.setText(result.getString("productBrandName"));
            productModelName.setText(result.getString("productModelName"));
            Date date = formalDate.parse(result.getString("productModelYear") + "0101");
            productModelSpinner.setValue(date);  
            
            productPriceSpinner.setValue(Integer.parseInt(result.getString("productPrice")));
            productLevels.setSelectedItem(result.getString("currentProductLevels"));
            productSize.setText(result.getString("productSize"));
            productScreenSize.setText(result.getString("productScreenSize"));
            productProcessor.setText(result.getString("productProcessor"));
            productRAM.setText(result.getString("productRAM"));
            productStorage.setText(result.getString("productStorage"));
            if(result.getString("productisAccessory").matches("1")){
                productIsAccToggle.setSelected(true);
            } else{
                productIsAccToggle.setSelected(false);
            }
            
            String avail = result.getString("productAvailability").matches("1") ? "TRUE" : "FALSE";
            System.out.println("avai: " + avail);
            if(avail.matches("TRUE")){
                availCombo.setSelectedIndex(0);
            } else{
                availCombo.setSelectedIndex(1);
            }
            
            String condition = result.getString("productCondition").matches("NEW") ? "NEW" : "USED";
            if(condition.matches("NEW")){
                conditionCombo.setSelectedIndex(0);
            } else{
                conditionCombo.setSelectedIndex(1);
            }
            
            String warranty = result.getString("productHasWarranty").matches("1") ? "TRUE" : "FALSE";
            if(warranty.matches("TRUE")){
                warrantyCombo.setSelectedIndex(0);
            } else{
                warrantyCombo.setSelectedIndex(1);
            }
            
            switch(result.getString("productHasOS")){
                case "Apple" -> Apple.setSelected(true);
                case "Windows" -> Windows.setSelected(true);

                case "Android" -> Android.setSelected(true);

                case "Other" -> Other.setSelected(true);
            }
            
            JOptionPane.showMessageDialog(rootPane, "Record found: " + productID.getText());
            stmt.close();
        } else{
            JOptionPane.showMessageDialog(rootPane, "No record found");
        }

    } catch(Exception e){
        JOptionPane.showMessageDialog(rootPane, "Error occurred: " + e);
    }
    }//GEN-LAST:event_productSearchBtnActionPerformed

    private void productDeleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productDeleteBtnActionPerformed
        try{
            int id = Integer.parseInt(productID.getText());
            Connection conn = DriverManager.getConnection(url);
            Statement stmt = conn.createStatement();
            ResultSet result = stmt.executeQuery(new Product().generateSearchStatement("productID", id, "Products"));
            if(result.next()){
                stmt.close();
                conn = DriverManager.getConnection(url);
                stmt = conn.createStatement();
                stmt.executeUpdate(new Product().generateDeleteRecordStatement("productID", id, "Products"));
                JOptionPane.showMessageDialog(rootPane, "Record Deleted at ID: " + id);
                clearProduct();
                stmt.close();
                conn.close();
            } else{
                JOptionPane.showMessageDialog(rootPane, "Record does not exist");
            }

        } catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, "Error: " + e);
        }
    }//GEN-LAST:event_productDeleteBtnActionPerformed
    
    private void hideSideMenu(){
        if (a == false) {
            hideShow(Menu, a, hideBtn);
            a = true;
        }    
    }
    
    
    private void productEditBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productEditBtnActionPerformed
        try{
            if (!productID.getText().isEmpty()) {
                hideSideMenu();
                
                JComboBox box = productLevels;
                
                JButton[] productButtons = {
                    productInsertBtn, productClearBtn, productSearchBtn, productDeleteBtn
                };
                
                JLabel[] menuOptions = {
                    hideBtn, statsBtn, someviewBtn, buysellBtn
                };
                
                Color changeBorderColor;
                if (productEditBtn.isSelected()) {
                    changeBorderColor = new Color(0, 255, 255);
                    for (int i = 0; i < productButtons.length; i++) {
                        productButtons[i].setVisible(false);
                        menuOptions[i].setVisible(false);
                    }
                    productID.setEditable(false);
                    productChangeUser.setVisible(false);
                    
                } else {
                    changeBorderColor = new Color(75, 0, 102);
                    for (int i = 0; i < productButtons.length; i++) {
                        productButtons[i].setVisible(true);
                        menuOptions[i].setVisible(true);
                    }
                    productID.setEditable(true);
                    productChangeUser.setVisible(true);
                }
                
                for (JTextField productArea : productAreas) {
                    productArea.setBorder(BorderFactory.createLineBorder(changeBorderColor, 2, true));
                }
                productID.setBorder(BorderFactory.createLineBorder(changeBorderColor, 2, true));
            } else {
                JOptionPane.showMessageDialog(rootPane, "Please enter the ID of the product you would like to edit");
            }
            
        } catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_productEditBtnActionPerformed
    
    private void productSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productSaveBtnActionPerformed
        try {
            SimpleDateFormat yearFormat = new SimpleDateFormat("yyyy");
            if (productEditBtn.isSelected()) {
                try {
                    String brandName = productBrandName.getText();
                    String modelName = productModelName.getText();
                    String year = String.valueOf(Integer.parseInt(yearFormat.format(productModelSpinner.getModel().getValue())));
                    String price = String.valueOf(productPriceSpinner.getValue());
                    String levels = String.valueOf(productLevels.getSelectedItem());
                    String size = productSize.getText();
                    String screenSize = productScreenSize.getText();
                    String processor = productProcessor.getText();
                    String RAM = productRAM.getText();
                    String storage = productStorage.getText();
                    
                    int isAcc;
                    if (productIsAccToggle.isSelected()) {
                        isAcc = 1;
                    } else {
                        isAcc = 0;
                    }
                    
                    int isAvail;
                    if (String.valueOf(availCombo.getSelectedItem()).matches("TRUE")) {
                        isAvail = 1;
                    } else {
                        isAvail = 0;
                    }
                    
                    String condition;
                    if (String.valueOf(conditionCombo.getSelectedItem()).matches("NEW")) {
                        condition = "NEW";
                    } else {
                        condition = "USED";
                    }
                    
                    int warranty;
                    if (String.valueOf(warrantyCombo.getSelectedItem()).matches("TRUE")) {
                        warranty = 1;
                    } else {
                        warranty = 0;
                    }
                    
                    String os = null;
                    if (Apple.isSelected()) {
                        os = "Apple";
                    } else if (Windows.isSelected()) {
                        os = "Windows";
                    } else if (Android.isSelected()) {
                        os = "Android";
                    } else if (Other.isSelected()) {
                        os = "Other";
                    }
                    
                    Connection conn = DriverManager.getConnection(url);
                    Statement stmt = conn.createStatement();
                    ResultSet result = stmt.executeQuery(new Product().generateSearchStatement("productID", Integer.parseInt(productID.getText()), "Products"));
                    if (result.next()) {
                        stmt.close();
                        try {
                            conn = DriverManager.getConnection(url);
                            stmt = conn.createStatement();
                            stmt.executeUpdate(new Product(brandName, modelName, year, price, levels, isAvail, condition, size, screenSize, processor, RAM, os, storage, isAcc, warranty).generateEditStatement(Integer.parseInt(productID.getText())));
                            JOptionPane.showMessageDialog(rootPane, "Record Updated ");
                            stmt.close();
                            conn.close();
                            result.close();
                        } catch (SQLException e) {
                            System.out.println(e);
                            JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                        }
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Record does not exist");
                        
                    }
                    
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(rootPane, "Error: " + e);
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Save button only accessible in edit mode");
            }
        } catch (HeadlessException headlessException) {
            throwError(headlessException);
        }
        
    }//GEN-LAST:event_productSaveBtnActionPerformed

    private void statsComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_statsComboBoxItemStateChanged
        try {
            statsProducts.setVisible(false);
            statsTransactions.setVisible(false);
            statsEmployees.setVisible(false);
            statsCustomers.setVisible(false);
            switch (String.valueOf(statsComboBox.getSelectedItem())) {
                case "Products" -> {
                    statsProducts.setVisible(true);
                    UpdateStatsProducts();
                }
                case "Transactions" -> {
                    statsTransactions.setVisible(true);
                    UpdateStatsTransactions();
                }
                case "Employees" -> {
                    statsEmployees.setVisible(true);
                    UpdateStatsEmployees();
                }
                case "Customers" -> {
                    statsCustomers.setVisible(true);
                    UpdateStatsCustomers();
                }
                
            }            
        } catch (Exception e) {
            throwError(e);
        }
    }//GEN-LAST:event_statsComboBoxItemStateChanged

    private void amountProductOSComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_amountProductOSComboItemStateChanged
        try{
            String os = "SELECT COUNT (productHasOS)\n" + "FROM Products\n" + "WHERE productHasOS LIKE '" + String.valueOf(amountProductOSCombo.getSelectedItem()) + "'";
            Statement stmt;
            ResultSet result;
            try (Connection conn = DriverManager.getConnection(url)) {
                stmt = conn.createStatement();
                result = stmt.executeQuery(os);
                amountProductOS.setText(result.getString(1));
            }
            stmt.close();
            result.close();  
            
        }   catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_amountProductOSComboItemStateChanged

    private void amountProductsYearSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_amountProductsYearSpinnerStateChanged
        try{
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy");
            int date = Integer.parseInt(simpleDateFormat.format(amountProductsYearSpinner.getModel().getValue()));
            String year = "SELECT COUNT(productModelYear)\n" +"FROM Products AS TotalPerYear\n" + "WHERE productModelYear = " + date; 
            
            Statement stmt;
            ResultSet result;
            try (Connection conn = DriverManager.getConnection(url)) {
                stmt = conn.createStatement();
                result = stmt.executeQuery(year);
                amountProductsPerYear.setText(result.getString(1));
            }
            stmt.close();
            result.close();  
            
        }   catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_amountProductsYearSpinnerStateChanged

    private void buyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyBtnActionPerformed
        try {
            BuySellOpening.setVisible(false);
            BuyPanel.setVisible(true);
            buyControlPanel.setVisible(true);
            
            DefaultTableModel table = new DefaultTableModel();
            table.addColumn("Brand");
            table.addColumn("Name");
            table.addColumn("Year");
            table.addColumn("Price");
            table.addColumn("Condition");
            table.addColumn("Is Accessory");
            table.addColumn("Has Warranty");
            
            buyProductTable.setModel(populateProductTable(table));
        } catch (Exception e) {
            throwError(e);
        }
        

    }//GEN-LAST:event_buyBtnActionPerformed
    
    public DefaultTableModel populateProductTable(DefaultTableModel t){
        try{
            String query = "SELECT productBrandName, productModelName, productModelYear, productPrice,\n" 
                    + "productCondition, productIsAccessory, productHasWarranty\n" 
                    + "FROM Products";
            ResultSet result;
            Statement stmt;
            try(Connection conn = DriverManager.getConnection(url)){
                stmt = conn.createStatement();
                result = stmt.executeQuery(query);
                
                while(result.next()){
                    t.addRow(new Object[]{
                        result.getString("productBrandName"),
                        result.getString("productModelName"),
                        result.getString("productModelYear"),
                        result.getString("productPrice"),
                        result.getString("productCondition"),
                        result.getString("productIsAccessory"),
                        result.getString("productHasWarranty"),                        
                    });
                }
                
                buyProductTable.changeSelection(0, 0, false, false);
                
                
            } catch(SQLException e){
                System.out.println(e);
                        
            }
            
            
        } catch(Exception e){
            System.out.println(e);
        }
        
        return t;
    }
    
    private void sellBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sellBtnActionPerformed
        try {
            BuySellOpening.setVisible(false);
            updateDashboard("products");
            updateUserPrivileges("Customer", productSaveBtn, productEditBtn, productDeleteBtn, productSearchBtn, productInsertBtn);
            
            productID.setEditable(false);
            productID.setText(null);
        } catch (Exception e) {
            throwError(e);
        }
    }//GEN-LAST:event_sellBtnActionPerformed

    private void buyItemBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyItemBtnActionPerformed
        try {
            if (takeCustomerDetails() == false) {
                takeCustomerDetails();
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Please select an item", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_buyItemBtnActionPerformed
    
    private boolean takeCustomerDetails(){
        try {
            JTextField telephone = new JTextField(10);
            telephone.setToolTipText("Format: 111-222-333");
            
            JTextField name = new JTextField(10);
            name.setToolTipText("Your first name (numbers are invalid)");
            
            JTextField surname = new JTextField(10);
            surname.setToolTipText("Your first surname (numbers are invalid)");
            
            JTextField cardCVV = new JTextField(3);
            cardCVV.setToolTipText("Your CVV number (numbers only)");
            
            JPanel myPanel = new JPanel(new GridLayout(0, 1));
            myPanel.add(Box.createHorizontalStrut(5)); // a spacer
            
            Font font = new Font("AppleUIFont", Font.BOLD, 12);
            JLabel product = new JLabel("Product:");
            product.setFont(font);
            myPanel.add(product);
            
            String Product = buyProductTable.getModel().getValueAt(buyProductTable.getSelectedRow(), 0).toString()
                    + " "
                    + buyProductTable.getModel().getValueAt(buyProductTable.getSelectedRow(), 1).toString();
            myPanel.add(new JLabel(Product));
            
            myPanel.add(new JLabel("Name:"));
            myPanel.add(name);
            myPanel.add(new JLabel("Surname:"));
            myPanel.add(surname);
            
            myPanel.add(new JLabel("Telephone:"));
            myPanel.add(telephone);
            
            myPanel.add(new JLabel("CVV:"));
            myPanel.add(cardCVV);
            
            String[] items = {"True", "False"};
            
            JComboBox<String> comboBox = new JComboBox<>(items);
            myPanel.add(new JLabel("Member:"));
            myPanel.add(comboBox);
            
            int dialogBox = JOptionPane.showConfirmDialog(null, myPanel, "Enter your details", JOptionPane.OK_CANCEL_OPTION);
            System.out.println(dialogBox);
            
            switch (dialogBox) {
                case JOptionPane.CANCEL_OPTION -> {
                    return true;
                }
                
                case JOptionPane.CLOSED_OPTION -> {
                    return true;
                }
                
                case JOptionPane.OK_OPTION -> {
                    if (name.getText().matches("\\d+") || surname.getText().matches("\\d+")) {
                        JOptionPane.showMessageDialog(null, "a number was entered where it doesn't belong", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return false;
                    } else if (!cardCVV.getText().matches("\\d+")) {
                        JOptionPane.showMessageDialog(null, "please enter a number", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }                    
                    
                    if (!validateTelephone(telephone)) {
                        JOptionPane.showMessageDialog(null, "please enter phone number in format: 111-222-333", "ERROR", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                }
                
                default -> {
                }
            }
            
            int member = 0;
            if (String.valueOf(comboBox.getSelectedItem()).matches("True")) {
                member = 1;
            } else {
                member = 0;
            }
            
            Customer customer = new Customer(telephone.getText(), -1, name.getText(), surname.getText(), cardCVV.getText(), member);
            Transaction transaction;
            Statement stmt;
            ResultSet result;
            try ( Connection conn = DriverManager.getConnection(url)) {
                try {
                    stmt = conn.createStatement();
                    stmt.executeUpdate(customer.generateInsertIntoStatement());
                    stmt.close();
                } catch (SQLException e) {
                    System.out.println(e);
                }
                
                try {
                    DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd");                    
                    LocalDateTime now = LocalDateTime.now();
                    // Value of 3 to indicate the column of price
                    String priceFromTable = buyProductTable.getModel().getValueAt(buyProductTable.getSelectedRow(), 3).toString();

                    /* Since it's an online interface, Payment method is always going to be Card,
                *  if a transaction is conducted in store than Cash or Card will be an option
                     */
                    String getProduct
                            = "SELECT productID FROM Products\n"
                            + "WHERE productBrandName LIKE '"
                            + buyProductTable.getModel().getValueAt(buyProductTable.getSelectedRow(), 0).toString()
                            + "' AND "
                            + "productModelName LIKE '"
                            + buyProductTable.getModel().getValueAt(buyProductTable.getSelectedRow(), 1).toString() + "';";
                    stmt = conn.createStatement();
                    result = stmt.executeQuery(getProduct);
                    
                    int newProductID = Integer.parseInt(result.getString("productID"));
                    stmt.close();
                    result.close();
                    
                    String insertNewTransact = new Transaction(newProductID, customer.getEmployeeID(), String.valueOf(dtf.format(now)), priceFromTable, "CARD", customer.getCustomerTelephone()).generateInsertIntoStatement();                    
                    stmt = conn.createStatement();
                    stmt.executeUpdate(insertNewTransact);
                    
                    stmt.close();
                    conn.close();
                } catch (SQLException e) {
                    System.out.println(e);
                }
                
                JOptionPane.showMessageDialog(null, "Your order is on the way.\nThanks for shopping with us, " + customer.getCustomerFirst() + "!", "Successful Purchase", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Please try again later\nError: " + e, "Error", JOptionPane.ERROR_MESSAGE);
            }
            
            return true;
        } catch (HeadlessException headlessException) {
            throwError(headlessException);
        }
        
        return false;
        
    }
    
    private void upBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upBtnMouseReleased
        try {
            if (viewProductBuyTable == 0) {
                viewProductBuyTable++;
                viewProductBuyTable = buyProductTable.getRowCount() - 1;
                buyProductTable.changeSelection(viewProductBuyTable, 0, false, false);
            } else {
                viewProductBuyTable--;
                buyProductTable.changeSelection(viewProductBuyTable, 0, false, false);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        
    }//GEN-LAST:event_upBtnMouseReleased

    private void downBtnMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downBtnMouseReleased
        try {
            if (viewProductBuyTable == buyProductTable.getRowCount() - 1) {
                viewProductBuyTable++;
                viewProductBuyTable = 0;
                buyProductTable.changeSelection(viewProductBuyTable, 0, false, false);
            } else {
                viewProductBuyTable++;
                buyProductTable.changeSelection(viewProductBuyTable, 0, false, false);
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        
    }//GEN-LAST:event_downBtnMouseReleased

    private void buyViewSearchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyViewSearchBtnActionPerformed
        try {
            String searchItem = buyViewSearchBox.getText().substring(0, 1).toUpperCase() + buyViewSearchBox.getText().substring(1);
            System.out.println(searchItem);
            String redefine = String.valueOf(redefineBox.getSelectedItem());
            String redefineField = null;
            Statement stmt;
            ResultSet result;
            
            switch (redefine) {
                case "Brand" -> {
                    redefineField = "productBrandName";
                }
                
                case "Name" -> {
                    redefineField = "productModelName";
                }
                
                case "Year" -> {
                    redefineField = "productModelYear";
                }
                
                case "Price" -> {
                    redefineField = "productPrice";
                }                
                
                case "Condition" -> {
                    redefineField = "productCondition";
                }
                
                case "Accessory" -> {
                    redefineField = "productIsAccessory";
                }
                
                case "Warranty" -> {
                    redefineField = "productHasWarranty";
                }
            }
            
            String query = "SELECT productBrandName, productModelName, productModelYear, "
                    + "productPrice, productCondition, productIsAccessory, productHasWarranty\n"
                    + "FROM Products"
                    + "\nWHERE "
                    + redefineField
                    + " LIKE '"
                    + searchItem
                    + "';";
            
            DefaultTableModel table = new DefaultTableModel();
            table.addColumn("Brand");
            table.addColumn("Name");
            table.addColumn("Year");
            table.addColumn("Price");
            table.addColumn("Condition");
            table.addColumn("Accessory");
            table.addColumn("Warranty");
            
            try ( Connection conn = DriverManager.getConnection(url)) {
                stmt = conn.createStatement();
                result = stmt.executeQuery(query);
                while (result.next()) {
                    table.addRow(new Object[]{
                        result.getString("productBrandName"),
                        result.getString("productModelName"),
                        result.getString("productModelYear"),
                        result.getString("productPrice"),
                        result.getString("productCondition"),
                        result.getString("productIsAccessory"),
                        result.getString("productHasWarranty")
                    });
                }
                
                buyProductTable.setModel(table);
                
            } catch (SQLException e) {
                System.out.println(e);
            }            
        } catch (Exception e) {
            System.out.println(e);
        }
        
    }//GEN-LAST:event_buyViewSearchBtnActionPerformed

    private void buyShowAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buyShowAllActionPerformed
        try {
            DefaultTableModel table = new DefaultTableModel();
            table.addColumn("Brand");
            table.addColumn("Name");
            table.addColumn("Year");
            table.addColumn("Price");
            table.addColumn("Condition");
            table.addColumn("Is Accessory");
            table.addColumn("Has Warranty");
            
            buyProductTable.setModel(populateProductTable(table));
        } catch (Exception e) {
            System.out.println(e);
        }
        
    }//GEN-LAST:event_buyShowAllActionPerformed

    private void upBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upBtnMouseEntered
        try {
            // Hover color
            changeColor(upBtnLine, new Color(255, 150, 255));
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_upBtnMouseEntered

    private void upBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_upBtnMouseExited
        try {
            // Normal color
            changeColor(upBtnLine, new Color(102, 102, 255));
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_upBtnMouseExited

    private void downBtnMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downBtnMouseEntered
        try {
            // Hover color
            changeColor(downBtnLine, new Color(255, 255, 0));
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_downBtnMouseEntered

    private void downBtnMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_downBtnMouseExited
        try {
            // Normal color
            changeColor(downBtnLine, new Color(102, 102, 255));
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_downBtnMouseExited

    private void customerTelephoneFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_customerTelephoneFocusLost
        // work on this
        try{
            if(!validateTelephone(customerTelephone)){
                JOptionPane.showMessageDialog(null, "please enter phone number in format: 111-222-333", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch(Exception e){
            throwError(e);
        }
    }//GEN-LAST:event_customerTelephoneFocusLost

    private void transactionDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_transactionDateFocusLost
        try {
            isValidDate(transactionDate);
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_transactionDateFocusLost

    private void employeeStartDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_employeeStartDateFocusLost
        try {
            isValidDate(employeeStartDate);
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_employeeStartDateFocusLost

    private void fullscreenMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fullscreenMousePressed
        try{
            if (this.getExtendedState() != MainInterface.MAXIMIZED_BOTH) {
                  this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);
                if(View.isVisible()){
                    Dimension biggerView = new Dimension(1337, 800);
                    dashboardPanel.setPreferredSize(biggerView);
                    View.setPreferredSize(biggerView);
                }
            } else {
                View.setPreferredSize(new Dimension(900, 720));
                dashboardPanel.setPreferredSize(new Dimension(900, 720));
                this.setExtendedState(MainInterface.NORMAL);

            }
        } catch(Exception e){
            System.out.println(e);
        }
    }//GEN-LAST:event_fullscreenMousePressed

    private void employeeSurnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_employeeSurnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_employeeSurnameActionPerformed

    private void customerFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerFirstActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerFirstActionPerformed

    private void customerSurnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_customerSurnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_customerSurnameActionPerformed

    private void productStorageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productStorageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productStorageActionPerformed
    
    private void UpdateStatsProducts(){
        try{
            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy");
            int date = Integer.parseInt(simpleDateFormat.format(amountProductsYearSpinner.getModel().getValue()));
            
            String totalProducts = "SELECT COUNT(productID) " +"FROM Products AS productCount";
            String totalUsed = "SELECT COUNT(productCondition)\n" + "FROM Products AS TotalUsed\n" +"WHERE productCondition LIKE 'USED'";
            String totalNew = "SELECT COUNT(productCondition)\n" + "FROM Products AS TotalNew\n" + "WHERE productCondition LIKE 'NEW'";
            String acc = "SELECT COUNT(productisAccessory)\n" + "FROM Products AS TotalAcc\n" + "WHERE productisAccessory = TRUE";
            String avg = "SELECT AVG(productPrice)\n" + "FROM Products AS AveragePrice";
            String lowest = "SELECT MAX (productPrice)\n" + "FROM Products AS MinPrice";
            String os = "SELECT COUNT (productHasOS)\n" + "FROM Products\n" + "WHERE productHasOS LIKE '" + String.valueOf(amountProductOSCombo.getSelectedItem()) + "'";
            String year = "SELECT COUNT(productModelYear)\n" +"FROM Products AS TotalPerYear\n" + "WHERE productModelYear = " + date; 
                        
            Statement stmt;
            ResultSet result;
            try (Connection conn = DriverManager.getConnection(url)) {
                stmt = conn.createStatement();
                result = stmt.executeQuery(totalProducts);
                
                numProducts.setText(result.getString(1));
                result = stmt.executeQuery(totalUsed);
                
                numUsedProducts.setText(result.getString(1));
                result = stmt.executeQuery(totalNew);
                
                numNewProducts.setText(result.getString(1));
                result = stmt.executeQuery(acc);
                
                numOfAcc.setText(result.getString(1));
                result = stmt.executeQuery(avg);
                
                avgPriceProduct.setText(result.getString(1));
                // TODO: PROBLEM
                
                result = stmt.executeQuery(lowest);
                lowestProductPrice.setText(result.getString(1));
                
                result = stmt.executeQuery(os);
                amountProductOS.setText(result.getString(1));
                
                result = stmt.executeQuery(year);
                amountProductsPerYear.setText(result.getString(1));
            }
            stmt.close();
            result.close();
        } catch(Exception e){
            System.out.println(e);
        }
    }
    
    private void UpdateStatsTransactions(){
        try{
            Statement stmt;
            ResultSet result;
            try (Connection conn = DriverManager.getConnection(url)) {
                stmt = conn.createStatement();
                result = stmt.executeQuery("SELECT COUNT(transactionID)\n" + "FROM Transactions AS TotalTransactions");
                
                amountTransactions.setText(result.getString(1));
                result = stmt.executeQuery("SELECT COUNT(transactionPaymentMethod)\n" + "FROM Transactions AS TotalCardMethod\n" + "WHERE transactionPaymentMethod LIKE 'CARD'");
                
                amountPaidByCard.setText(result.getString(1));
                result = stmt.executeQuery("SELECT COUNT(transactionPaymentMethod)\n" + "FROM Transactions AS TotalCardMethod\n" + "WHERE transactionPaymentMethod LIKE 'CASH'");
                
                amountPaidByCash.setText(result.getString(1));
                result = stmt.executeQuery("SELECT MIN (transactionDate)\n" + "FROM Transactions AS YoungestDate");
                
                oldestTransaction.setText(result.getString(1));
                result = stmt.executeQuery("SELECT MAX (transactionDate)\n" + "FROM Transactions AS MostRecent");
                
                mostRecentTransaction.setText(result.getString(1));
                result = stmt.executeQuery("SELECT SUM(transactionAmount)\n" + "FROM Transactions AS SumAmount");
                
                transactionsSum.setText(result.getString(1));
            }
            stmt.close();
            result.close();
            
        } catch(Exception e){
            System.out.println(e);
        }
    }
    
    private void UpdateStatsEmployees(){
        numEmployees.getText();
        numFullTimeStaff.getText();
        numPartTimeStaff.getText();
        numFlexibleStaff.getText();
        try{
            Statement stmt;
            ResultSet result;
            try (Connection conn = DriverManager.getConnection(url)) {
                stmt = conn.createStatement();
                result = stmt.executeQuery("SELECT COUNT(employeeID)\n" + "FROM Employees AS TotalEmployeees");
                numEmployees.setText(result.getString(1));

                
                result = stmt.executeQuery("SELECT COUNT (employeeTypeOfContract)\n" + "FROM Employees AS TotalFullTime\n" + "WHERE employeeTypeOfContract LIKE 'Full-Time'");
                numFullTimeStaff.setText(result.getString(1));

                
                result = stmt.executeQuery("SELECT COUNT (employeeTypeOfContract)\n" + "FROM Employees AS TotalPartTime\n" + "WHERE employeeTypeOfContract LIKE 'Part-Time'");
                numPartTimeStaff.setText(result.getString(1));

                
                result = stmt.executeQuery("SELECT COUNT (employeeTypeOfContract)\n" + "FROM Employees AS TotalFullTime\n" + "WHERE employeeTypeOfContract LIKE 'Flexible'");
                numFlexibleStaff.setText(result.getString(1));

                
                result = stmt.executeQuery("SELECT COUNT(employeePayFrequency)\n" + "FROM Employees AS TotalPaidWeekly\n" + "WHERE employeePayFrequency LIKE 'Weekly'");
                numPaidWeekly.setText(result.getString(1));

                
                result = stmt.executeQuery("SELECT AVG(employeeHourlyRate)\n" + "FROM Employees AS AvgHourlyRate");                
                avgHourlyRate.setText(String.format("%.2f", Float.parseFloat(result.getString(1))));

//                ResultSet result1;
//                Statement stmt1 = conn.createStatement();
                
                String topEmployeeID = "select Customers.employeeID, COUNT(Customers.employeeID) AS MOST_FREQUENT\n" 
                            + "from Customers\n" 
                            + "GROUP BY Customers.employeeID\n" 
                            + "ORDER BY COUNT(Customers.employeeID) DESC LIMIT 1";
                result = stmt.executeQuery(topEmployeeID);
                
                String employeeName = "SELECT employeeFirst, employeeSurname\n" 
                        + "FROM Employees\n" 
                        + "WHERE employeeID = "
                        + result.getString("employeeID");
                result = conn.createStatement().executeQuery(employeeName);
                employeeMostTransactions.setText(result.getString("employeeFirst") + " " + result.getString("employeeSurname"));
                
                
                conn.close();    
            }
            stmt.close();
            result.close();
            

            
            
            
            // TODO: EMPLOYEE MOST TRANSACTIONS
            
            
        } catch(Exception e){
            System.out.println(e);
        }
        
    }
    
    private void UpdateStatsCustomers(){
        try{
            Statement stmt;
            ResultSet result;
            try (Connection conn = DriverManager.getConnection(url)) {
                stmt = conn.createStatement();
                result = stmt.executeQuery("SELECT COUNT(customerTelephone)\n" + "FROM Customers AS TotalCustomers");
                
                amountCustomers.setText(result.getString(1));
                result = stmt.executeQuery("SELECT COUNT(customerIsMember)\n" + "FROM Customers AS numNonMembers\n" + "WHERE customerIsMember = false");
                
                numNonmembers.setText(result.getString(1));
                result = stmt.executeQuery("SELECT COUNT(customerIsMember)\n" + "FROM Customers AS numMembers\n" + "WHERE customerIsMember = true");
                
                numMembers.setText(result.getString(1));
                result = stmt.executeQuery("SELECT COUNT(customerIsMember)\n" + "FROM Customers AS numMembers\n" + "WHERE customerIsMember = true");
                
                numMembers.setText(result.getString(1));
                result = stmt.executeQuery("SELECT customerFirst, customerLast, customerTelephone \n" + "FROM Customers AS MemberDetails\n" + "WHERE customerIsMember = TRUE");
                
                DefaultTableModel members = new DefaultTableModel();
                members.addColumn("First Name");
                members.addColumn("Surname");
                members.addColumn("Telephone");
                
                while(result.next()){
                    members.addRow(new Object[]{
                        result.getString("customerFirst"), result.getString("customerLast"), result.getString("customerTelephone")
                    });
                }   
                allMembers.setModel(members);
                
                result = stmt.executeQuery("SELECT customerFirst, customerLast, customerTelephone \n" + "FROM Customers AS nonMembers\n" + "WHERE customerIsMember = FALSE");
                DefaultTableModel nonmembers = new DefaultTableModel(); 
                nonmembers.addColumn("First Name");
                nonmembers.addColumn("Surname");
                nonmembers.addColumn("Telephone");
                
                while(result.next()){
                    nonmembers.addRow(new Object[]{
                        result.getString("customerFirst"), result.getString("customerLast"), result.getString("customerTelephone")
                    });
                }   
                
                nonMembers.setModel(nonmembers);
            }
            stmt.close();
            result.close();
            
            
            
        } catch(Exception e){
            System.out.println(e);
        }
    }
    
    private String checkUserPrivileges(String boxValue, JComboBox box){
        try {
            switch (boxValue) {
                case "Admin" -> {
                    try {
                        String userInformation = JOptionPane.showInputDialog(null, "Please enter "
                                + boxValue
                                + " ID: ", boxValue
                                + " Login", JOptionPane.INFORMATION_MESSAGE);
                        
                        if (userInformation.matches(adminKey)) {
                            JOptionPane.showMessageDialog(null, "Successful Login", "Success", JOptionPane.INFORMATION_MESSAGE);
                            currentUser = boxValue;
                            productInsertBtn.setText("Insert");
                            return "Admin";
                        } else {
                            JOptionPane.showMessageDialog(null, "Incorrect Details", "Invalid", JOptionPane.ERROR_MESSAGE);
                            box.setSelectedItem(currentUser);
                        }
                    } catch (Exception e) {
                        System.out.println(e);
                        box.setSelectedItem(currentUser);
                    }
                }
                
                case "Employee" -> {
                    try {
                        String userInformation = JOptionPane.showInputDialog(null, "Please enter "
                                + boxValue
                                + " ID: ", boxValue
                                + " Login", JOptionPane.INFORMATION_MESSAGE);
                        
                        if (userInformation.matches(employeeKey)) {
                            JOptionPane.showMessageDialog(null, "Successful Login", "Success", JOptionPane.INFORMATION_MESSAGE);
                            currentUser = boxValue;
                            productInsertBtn.setText("Insert");
                            return "Employee";
                        } else {
                            box.setSelectedItem(currentUser);
                            JOptionPane.showMessageDialog(null, "Incorrect Details", "Invalid", JOptionPane.ERROR_MESSAGE);
                        }
                    } catch (Exception e) {
                        System.out.println(e);
                        box.setSelectedItem(currentUser);
                    }
                }
                
                case "Customer" -> {
                    currentUser = boxValue;
                    productInsertBtn.setText("Sell");
                    return "Customer";
                }
                
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        
        return null;
    }
    
    private void updateUserPrivileges(String user, JButton save, JToggleButton edit, JButton delete, JButton search, JButton insert){
        try {
            search.setVisible(true);
            JButton functionButtons[] = {save, delete, insert};
            switch (user) {
                case "Admin" -> {
                    for (JButton functionButton : functionButtons) {
                        functionButton.setVisible(true);
                        edit.setVisible(true);
                    }
                    productID.setEditable(true);
                    JOptionPane.showMessageDialog(null, "Admin view active", "Privilege Update", JOptionPane.INFORMATION_MESSAGE);
                }
                
                case "Employee" -> {                    
                    edit.setVisible(true);
                    save.setVisible(true);
                    delete.setVisible(false);
                    insert.setVisible(false);
                    productID.setEditable(true);
                    JOptionPane.showMessageDialog(null, "Employee view active", "Privilege Update", JOptionPane.INFORMATION_MESSAGE);
                }
                
                case "Customer" -> {
                    productChangeUser.setSelectedIndex(2);
                    insert.setVisible(true);
                    save.setVisible(false);
                    edit.setVisible(false);
                    delete.setVisible(false);
                    productID.setEditable(false);
                }
            }
        } catch (HeadlessException headlessException) {
            System.out.println(headlessException);
        }
    }
    

    private void validateNumberBox(JTextField field) {
        try{
            if (!field.getText().matches("\\d+") | field.getText().isEmpty()) {
                JOptionPane.showMessageDialog(rootPane, "Please enter an integer", "ERROR", JOptionPane.ERROR_MESSAGE);
                field.setText("");
            }
        } catch(Exception e){
            System.out.println(e);
        }
    }
    
    private boolean validateTelephone(JTextField input) {
        final Pattern pattern = Pattern.compile("\\d\\d\\d-\\d\\d\\d-\\d\\d\\d", Pattern.CASE_INSENSITIVE);

        final Matcher matcher = pattern.matcher(String.valueOf(input.getText()));        
        
        if(!matcher.matches()){
            input.setText("");
            return false;
        } else{
            return true;
        }
    }
    
	public void isValidDate(JTextField input) {
            // If it can parse it, return true else return false 
            SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
            try {
             format.parse(String.valueOf(input.getText()));
         }	// End try

         catch(ParseException e){
            JOptionPane.showMessageDialog(rootPane, "Please enter date in YYYY-MM-DD", "ERROR", JOptionPane.ERROR_MESSAGE);
            input.setText(null);
         }	// End catch
	     
	}	// End method
        
        private boolean checkFields(JTextField fields[]){
            for(int i = 0; i < fields.length; i++){     
                  if(fields[i].getText().isEmpty()){
                      return false;
                  } 
            }
            
            return true;
        }
    

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainInterface().setVisible(true);
//            try {
//                Thread.sleep(5000);
//            } catch (InterruptedException ex) {
//                
//            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton Android;
    private javax.swing.JRadioButton Apple;
    private javax.swing.JPanel BuyPanel;
    private javax.swing.JPanel BuySellOpening;
    private javax.swing.JPanel BuyandSell;
    private javax.swing.JPanel Customers;
    private javax.swing.JPanel Employees;
    private javax.swing.JPanel Header;
    private javax.swing.JPanel Menu;
    private javax.swing.JPanel MenuIcon;
    private javax.swing.JRadioButton Other;
    private javax.swing.JPanel Stats;
    private javax.swing.JPanel Transactions;
    private javax.swing.JPanel View;
    private javax.swing.JRadioButton Windows;
    private javax.swing.JTable allMembers;
    private javax.swing.JTextField amountCustomers;
    private javax.swing.JTextField amountPaidByCard;
    private javax.swing.JTextField amountPaidByCash;
    private javax.swing.JTextField amountProductOS;
    private javax.swing.JComboBox<String> amountProductOSCombo;
    private javax.swing.JTextField amountProductsPerYear;
    private javax.swing.JSpinner amountProductsYearSpinner;
    private javax.swing.JTextField amountTransactions;
    private javax.swing.JComboBox<String> availCombo;
    private javax.swing.JTextField avgHourlyRate;
    private javax.swing.JTextField avgPriceProduct;
    private javax.swing.JButton buyBtn;
    private javax.swing.JPanel buyControlPanel;
    private javax.swing.JButton buyItemBtn;
    private javax.swing.JScrollPane buyProductPane;
    private javax.swing.JTable buyProductTable;
    private javax.swing.JButton buyShowAll;
    private javax.swing.JTextField buyViewSearchBox;
    private javax.swing.JButton buyViewSearchBtn;
    private javax.swing.JPanel buysell;
    private javax.swing.JLabel buysellBtn;
    private javax.swing.JRadioButton cardPayment;
    private javax.swing.JRadioButton cashPayment;
    private javax.swing.JLabel close;
    private javax.swing.JPanel closeBtn;
    private javax.swing.JComboBox<String> conditionCombo;
    private javax.swing.ButtonGroup conditionGroup;
    private javax.swing.JPanel controlPanel11;
    private javax.swing.JPanel controlPanel7;
    private javax.swing.JPanel controlPanelOutter10;
    private javax.swing.JPanel controlPanelOutter12;
    private javax.swing.JPanel controlPanelOutter7;
    private javax.swing.JPanel controlPanelOutter8;
    private javax.swing.JPanel controlPanelOutter9;
    private javax.swing.JTextField customerCVV;
    private javax.swing.JComboBox<String> customerChangeUser;
    private javax.swing.JButton customerClearBtn;
    private javax.swing.JPanel customerControlPanel;
    private javax.swing.JButton customerDeleteBtn;
    private javax.swing.JToggleButton customerEditBtn;
    private javax.swing.JTextField customerEmployeeID;
    private javax.swing.JTextField customerFirst;
    private javax.swing.JButton customerInsertBtn;
    private javax.swing.JButton customerSaveBtn;
    private javax.swing.JButton customerSearchBtn;
    private javax.swing.JTextField customerSurname;
    private javax.swing.JTextField customerTelephone;
    private javax.swing.JPanel dashboardPanel;
    private javax.swing.JLabel downBtn;
    private javax.swing.JPanel downBtnLine;
    private javax.swing.JPanel downRow;
    private javax.swing.JButton employeeClearBtn;
    private javax.swing.JSpinner employeeContractSpinner;
    private javax.swing.JComboBox<String> employeeContractType;
    private javax.swing.JButton employeeDeleteBtn;
    private javax.swing.JToggleButton employeeEditBtn;
    private javax.swing.JTextField employeeFirst;
    private javax.swing.JTextField employeeHourlyRate;
    private javax.swing.JTextField employeeID;
    private javax.swing.JButton employeeInsertBtn;
    private javax.swing.JComboBox<String> employeeLengthDrop;
    private javax.swing.JTextField employeeMostTransactions;
    private javax.swing.JTextField employeePosition;
    private javax.swing.JButton employeeSaveBtn;
    private javax.swing.JButton employeeSearchBtn;
    private javax.swing.JTextField employeeStartDate;
    private javax.swing.JTextField employeeSurname;
    private javax.swing.JLabel fullscreen;
    private javax.swing.JLabel hideBtn;
    private javax.swing.JPanel hidemenu;
    private javax.swing.JPanel iconminmaxclose;
    private javax.swing.ButtonGroup isAvail;
    private javax.swing.ButtonGroup isMember;
    private javax.swing.JRadioButton isMemberFalse;
    private javax.swing.JRadioButton isMemberTrue;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel49;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel50;
    private javax.swing.JLabel jLabel51;
    private javax.swing.JLabel jLabel52;
    private javax.swing.JLabel jLabel53;
    private javax.swing.JLabel jLabel54;
    private javax.swing.JLabel jLabel55;
    private javax.swing.JLabel jLabel56;
    private javax.swing.JLabel jLabel57;
    private javax.swing.JLabel jLabel58;
    private javax.swing.JLabel jLabel59;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel60;
    private javax.swing.JLabel jLabel61;
    private javax.swing.JLabel jLabel63;
    private javax.swing.JLabel jLabel64;
    private javax.swing.JLabel jLabel65;
    private javax.swing.JLabel jLabel66;
    private javax.swing.JLabel jLabel67;
    private javax.swing.JLabel jLabel68;
    private javax.swing.JLabel jLabel69;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel70;
    private javax.swing.JLabel jLabel71;
    private javax.swing.JLabel jLabel72;
    private javax.swing.JLabel jLabel73;
    private javax.swing.JLabel jLabel74;
    private javax.swing.JLabel jLabel75;
    private javax.swing.JLabel jLabel76;
    private javax.swing.JLabel jLabel77;
    private javax.swing.JLabel jLabel78;
    private javax.swing.JLabel jLabel79;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel80;
    private javax.swing.JLabel jLabel81;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JPanel linehidemenu;
    private javax.swing.JPanel linequestion;
    private javax.swing.JPanel linestats;
    private javax.swing.JPanel lineview;
    private javax.swing.JTextField lowestProductPrice;
    private javax.swing.JPanel maxBtn;
    private javax.swing.JPanel menuCustomers;
    private javax.swing.JPanel menuEmployees;
    private javax.swing.JPanel menuProducts;
    private javax.swing.JPanel menuTransactions;
    private javax.swing.JPanel menuhide;
    private javax.swing.JPanel minBtn;
    private javax.swing.JTextField mostRecentTransaction;
    private javax.swing.JTable nonMembers;
    private javax.swing.JTextField numEmployees;
    private javax.swing.JTextField numFlexibleStaff;
    private javax.swing.JTextField numFullTimeStaff;
    private javax.swing.JTextField numMembers;
    private javax.swing.JTextField numNewProducts;
    private javax.swing.JTextField numNonmembers;
    private javax.swing.JTextField numOfAcc;
    private javax.swing.JTextField numPaidWeekly;
    private javax.swing.JTextField numPartTimeStaff;
    private javax.swing.JTextField numProducts;
    private javax.swing.JTextField numUsedProducts;
    private javax.swing.JTextField oldestTransaction;
    private javax.swing.ButtonGroup operatingSystem;
    private javax.swing.ButtonGroup payFreq;
    private javax.swing.JRadioButton payFreqMonthly;
    private javax.swing.JRadioButton payFreqWeekly;
    private javax.swing.ButtonGroup paymentMethod;
    public static javax.swing.JTextField productBrandName;
    private javax.swing.JComboBox<String> productChangeUser;
    private javax.swing.JButton productClearBtn;
    private javax.swing.JButton productDeleteBtn;
    private javax.swing.JToggleButton productEditBtn;
    public static javax.swing.JTextField productID;
    private javax.swing.JButton productInsertBtn;
    private javax.swing.JToggleButton productIsAccToggle;
    private javax.swing.JComboBox<String> productLevels;
    public static javax.swing.JTextField productModelName;
    private javax.swing.JSpinner productModelSpinner;
    private javax.swing.JPanel productPanel;
    private javax.swing.JSpinner productPriceSpinner;
    public static javax.swing.JTextField productProcessor;
    public static javax.swing.JTextField productRAM;
    private javax.swing.JButton productSaveBtn;
    public static javax.swing.JTextField productScreenSize;
    private javax.swing.JButton productSearchBtn;
    public static javax.swing.JTextField productSize;
    public static javax.swing.JTextField productStorage;
    private javax.swing.ButtonGroup queryType;
    private javax.swing.JComboBox<String> redefineBox;
    private javax.swing.JButton sellBtn;
    private javax.swing.JLabel someviewBtn;
    private javax.swing.JPanel stats;
    private javax.swing.JLabel statsBtn;
    private javax.swing.JComboBox<String> statsComboBox;
    private javax.swing.JPanel statsCustomers;
    private javax.swing.JPanel statsEmployees;
    private javax.swing.JPanel statsProducts;
    private javax.swing.JPanel statsTransactions;
    private javax.swing.JScrollPane tableScrollPane;
    private javax.swing.JTextField transactionAmount;
    private javax.swing.JButton transactionClearBtn;
    private javax.swing.JTextField transactionCustomerTele;
    private javax.swing.JTextField transactionDate;
    private javax.swing.JButton transactionDeleteBtn;
    private javax.swing.JToggleButton transactionEditBtn;
    private javax.swing.JTextField transactionEmployeeID;
    private javax.swing.JTextField transactionID;
    private javax.swing.JButton transactionInsertBtn;
    private javax.swing.JTextField transactionProductID;
    private javax.swing.JButton transactionSaveBtn;
    private javax.swing.JButton transactionSearchBtn;
    private javax.swing.JComboBox<String> transactionsChangeUser;
    private javax.swing.JLabel transactionsHeading10;
    private javax.swing.JLabel transactionsHeading11;
    private javax.swing.JLabel transactionsHeading5;
    private javax.swing.JLabel transactionsHeading6;
    private javax.swing.JLabel transactionsHeading7;
    private javax.swing.JLabel transactionsHeading8;
    private javax.swing.JLabel transactionsHeading9;
    private javax.swing.JTextField transactionsSum;
    private javax.swing.JLabel upBtn;
    private javax.swing.JPanel upBtnLine;
    private javax.swing.JPanel upRow;
    private javax.swing.JPanel view;
    private javax.swing.JButton viewBtn;
    private javax.swing.JButton viewClearBtn;
    private javax.swing.JPanel viewControlPanel;
    private javax.swing.JTable viewTable;
    private javax.swing.JComboBox<String> viewTableNames;
    private javax.swing.JComboBox<String> warrantyCombo;
    private javax.swing.ButtonGroup warrantyGroup;
    // End of variables declaration//GEN-END:variables
}
